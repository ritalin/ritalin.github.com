<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c# | Since 1975]]></title>
  <link href="http://ritalin.github.com/blog/categories/c-/atom.xml" rel="self"/>
  <link href="http://ritalin.github.com/"/>
  <updated>2015-03-09T22:05:45+09:00</updated>
  <id>http://ritalin.github.com/</id>
  <author>
    <name><![CDATA[ktz_alias]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rhino.Mocks tips]]></title>
    <link href="http://ritalin.github.com/2012/12-20/rhino-mocks-tips/"/>
    <updated>2012-12-20T21:27:00+09:00</updated>
    <id>http://ritalin.github.com/2012/12-20/rhino-mocks-tips</id>
    <content type="html"><![CDATA[<p>いくつか引っかかったので、忘れないうちにメモとして残しとく。</p>

<!-- more -->

<h2>プロパティをモック</h2>

<p>具象クラスのモックを作る場合、対象のメソッドやプロパティをvirtualにする必要がある。
モック目的のためだけにvirtualにするのは気が重い。</p>

<p>この場合、インターフェースを切り出し、インターフェースからモック作れば心配無用。
モックから戻り値を取得するためにReturnやDoも必要。</p>

<h2>NUnitで使う際の注意点</h2>

<ul>
<li>連続実行したとき、2つ目以降のテストケースが失敗する</li>
</ul>

<p>Rhino.Mocksに限らないが、フィールドの初期化子でインスタンス化した場合に発生。
必ずSetUp属性、FixtureSetpu属性、または各テストコード内で初期化すること。</p>

<p>GOOS本(p.26)にもちゃんと書かれてる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent Calendar 2012 Winter (C#)]]></title>
    <link href="http://ritalin.github.com/2012/12-02/csharp-advent-2012/"/>
    <updated>2012-12-02T00:00:00+09:00</updated>
    <id>http://ritalin.github.com/2012/12-02/csharp-advent-2012</id>
    <content type="html"><![CDATA[<p>これは<a href="http://atnd.org/events/33905">C# Advent Calender 2012</a>参加記事です。</p>

<p>今年の2月〜10月の間、<a href="http://msdn.microsoft.com/ja-jp/windows/apps/">Windows8の名前を発してはいけないアプリ</a>を開発していて、その間にいくつか小道具を作っては<a href="https://gist.github.com">gist</a>に放り込んだので、使えるもの使えないものひっくるめて、大掃除がてら、いくつか紹介いたします。</p>

<h3><a href="https://gist.github.com/2418469">gist: 2418469</a> A helper class to extract property-names of ViewModel for MVVM.</h3>

<p>{% gist 2418469 PropertyCategoryMapper.cs %}</p>

<p>WPFでMVVM的なことをやってて、いつも気になるのが <code>INotifyPropertyChanged.PropertyChanged</code> イベントを介して通知を行う際の引数。</p>

<p>あの文字列で渡すってのが、もう気に入らないです（個人的感想です）。
カターンゼンじゃないし...（個人的感想です）。
C# 5.0からは、<code>CallerInfoAttribute</code>が追加されて、幾分楽にはなってるっぽいですが、read-onlyなプロパティにも値をセットしなきゃならんとかチョーメンドイわけです（個人的感想です）。</p>

<p>文字列は自由に表現が出来る分、記述間違いにかどうかは実行時でないと分からない問題を持っていますので、できるだけコンパイル時に蹴ってもらえるよう、専用の型を与えたいと思っていました。
そこで、上のようなコード書いてみました。</p>

<p>使い方は以下のように。。。
{% gist 2418469 PropertyCategoryTestViewModel.cs %}</p>

<p>プロパティに<code>PropertyCategoryAttribute(Type)</code>を付与します。
コンストラクタで、<code>PropertyCategoryMapper</code>をインスタンス化します。
View Modelの各処理の通知個所で、<code>ToProprtyNames&lt;SomeType&gt;()</code>を呼ぶことで、すべての対象のプロパティ名が取得できます。
複数の<code>PropertyCategory</code>属性を付けておけば、タグごとに通知するプロパティを切り替えることが出来るようになります。</p>

<p>参考までに、このgistには、テストコードも付けてます。</p>

<p>本当は<code>PropertyCategory</code>属性の引数に列挙値(enum)を渡したかったのですが、<code>Attribute</code>の仕様で定数、Typeまたはそれらの配列しか認められていなかったため、代わりにinterfaceを使用しました。</p>

<p>それと１回だけとはいえ、リフレクションに頼ってしまったのも辛いところです。しかし、世界中の誰かがきっと、ろずりーんでコンパイル時に生成するコードを書いてくれると信じています。私は、にわかなのでムリです。</p>

<p>以下、疲れたので簡単に。。。</p>

<h3><a href="https://gist.github.com/3521721">3521721</a> Any filter extension</h3>

<p>{% gist 3521721 EnumerableAnyExtensions.cs %}</p>

<p>何となく思いついた、<code>Enumerable.Where</code>でOr (||) を指定するのと同じものです。
Orでもいいんだけど、どこで改行したらいいか分からなくなってイヤーンだし、個々の述語関数使い回したかったし、という理由で作っちゃいました。ホントただの俺得です。</p>

<p>つい最近気づきましたが、<code>Enumerable.Where</code>って、要素とインデックスが渡されるオーバーロードがあったんですね。
なので作ってはないんですの。</p>

<p>もう一つ、俺得クラスとして、コレクションの<code>full outer join</code>書いたけど、gistにあげ忘れてたから省略。てへへ。</p>

<h3><a href="https://gist.github.com/3046512">3046512</a> Maybeモナドの写経</h3>

<p>{% gist 3046512 Maybe.cs %}</p>

<p>見ての通り、<a href="http://matarillo.com/general/monads.php">matarillo.com / モナドの驚異</a>の写経です。
ただ、ちょっとだけ手を入れて、c# 5.0のasync / awaitにも対応させてみました。</p>

<p>モナドとかよく分からないですので、写経元見てもらった方がいいと思います。</p>

<p>以上、淡々と並べてみました。</p>
]]></content>
  </entry>
  
</feed>
