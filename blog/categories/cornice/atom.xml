<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cornice | Since 1975]]></title>
  <link href="http://ritalin.github.io/blog/categories/cornice/atom.xml" rel="self"/>
  <link href="http://ritalin.github.io/"/>
  <updated>2015-06-02T23:25:00+09:00</updated>
  <id>http://ritalin.github.io/</id>
  <author>
    <name><![CDATA[ktz_alias]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cornice Tutorial (3)]]></title>
    <link href="http://ritalin.github.io/2013/07-04/cornice-tutorial-03/"/>
    <updated>2013-07-04T01:00:00+09:00</updated>
    <id>http://ritalin.github.io/2013/07-04/cornice-tutorial-03</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<p>公式サイトの<a href="http://cornice.readthedocs.org/en/latest/tutorial.html">チュートリアル</a>の写経、第三回。
ユーザー管理サービスの実装において、Validatorの話がでてくるので、内容を抑えつつ一覧、追加、削除の実装を進めていきたいと思います。</p>

<!-- more -->

<h2>サービスの処理フロー</h2>

<p>サービスの各処理はその前後に処理を挟むことができます。前方に挟む方をValidator、後方をFilterと呼びます。
処理の指定はサービス定義、またはデコレータをHTTPメソッドのアノテーションとして使用し、その引数にその関数を渡すことで行います。</p>

<p>即ち処理フローは、</p>

<ul>
<li>Validator（オプション）</li>
<li>本処理（必須）</li>
<li>Filter（オプション）</li>
</ul>

<p>となります。</p>

<h2>Validator</h2>

<p>Validatorとは、サービス実装コードの本処理の全面で実行されるプリプロセスであり、CorniceにおけるValidatorの責務は</p>

<ul>
<li>リクエスト入力値のチェック</li>
<li>リクエスト入力値の変換（例えば任意のオブジェクトへ等）</li>
</ul>

<p>とされています。
ここで入力値として、クエリパラメータやPOSTパラメータだけでなく、HTTPヘッダも対象とすることができます。</p>

<p>Validatorの指定はサービスの定義またはメソッドアノテーションの引数として以下のように行います。</p>

<blockquote>
<p>(サービス定義)</p>

<p>service = Service(&#8230;, validators=&lt;関数&gt;, &#8230;)</p>

<p>（メソッドアノテーション）</p>

<p>@service.Get(&#8230;, validators=&lt;関数&gt;, &#8230;)</p>
</blockquote>

<p>Validator関数のインターフェースは、Requestオブジェクトを受け取り、何も返さない手続きです。</p>

<p>入力値が妥当な場合、Request#validatedディクショナリに、エラーの場合、Request#errorsディクショナリにそれぞれ値を格納します。
実例は後の写経の節で。</p>

<p>Requestは基盤として使用しているPyramidのものをベースに、Validate結果格納用のディクショナリが付与されたものとなっています。
Requestオブジェクトを介して受け取れる値については<a href="http://docs.pylonsproject.jp/projects/pyramid-doc-ja/en/latest/api/request.html#pyramid.request.Request">APIリファレンス</a>を確認してください。</p>

<p>Request#errorsディクショナリに１つでも値が格納された場合、本処理は実行されず、組み込みのエラーハンドラが実行されます。</p>

<h2>エラーハンドラ</h2>

<p>組み込みのエラーハンドラは、正常処理の時と同様に、simpleJsonを使用します。</p>

<p>このエラーハンドラもまたサービスの定義またはメソッドアノテーションの引数として指定することができます。</p>

<blockquote>
<p>(サービス定義)</p>

<p>service = Service(&#8230;, error_handler=&lt;関数&gt;, &#8230;)</p>

<p>（メソッドアノテーション）</p>

<p>@service.Get(&#8230;, error_handler=&lt;関数&gt;, &#8230;)</p>
</blockquote>

<p>エラーハンドラ関数のインターフェースは、エラー内容を引数に取り、<a href="http://pylons-webframework.readthedocs.org/en/v0.9.7/thirdparty/webob.html#module-webob.exc">webob.exc.HTTPError</a>の派生クラスを返す関数です。</p>

<blockquote>
<p>error<em>handler</em>func(errors): Response</p>
</blockquote>

<p>エラー内容として、Request#errorsディクショナリが渡されます。</p>

<p>どのように実装するかは、corniceの<code>util.py</code>に記述されている、<code>json_error</code>関数を眺めてみるのがよいかと思います。</p>

<h2>Filter</h2>

<p>Filterは、サービス実装コードの本処理から返されるレスポンスを加工する目的のために使用されます。</p>

<p>Filterの指定はValidator同様に、サービス定義またはメソッドアノテーションの引数として以下のように指定します。</p>

<blockquote>
<p>(サービス定義)</p>

<p>service = Service(&#8230;, filters=&lt;関数&gt;, &#8230;)</p>

<p>（メソッドアノテーション）</p>

<p>@service.Get(&#8230;, filters=&lt;関数&gt;, &#8230;)</p>
</blockquote>

<p>Filterのインターフェースは、レスポンスデータを受け取り、加工されたレスポンスを返す関数です。</p>

<blockquote>
<p>filter_interface(レスポンス): レスポンス</p>
</blockquote>

<p>もしくは、オプションとしてRequestオブジェクトを第二引数で受け取ることもできます。</p>

<blockquote>
<p>filter_interface(レスポンス, Request): レスポンス</p>
</blockquote>

<p>Filter処理は、corniceの土台であるpyramidのレイヤーで実行されます。
この処理がエラーのエスポンスにも作用するかどうかは、確認できておらず不明です。</p>

<h2>チュートリアルのユーザー管理機能（前回の続き）</h2>

<p>前回の続きとして、ユーザー登録を写経します。</p>

<h3>ユーザー登録</h3>

<p>ユーザー登録の仕様は、POSTデータとして、ユーザー名を送信します。</p>

<p>ユニークチェックを行い、重複がなければ、</p>

<blockquote>
<p>ユーザー名: ランダムなハッシュ</p>
</blockquote>

<p>をディクショナリに保持させます。</p>

<p>まず、この入力値に対するValidatorを用意します。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">import os
import binascii

def validate_unique(request):
    name = request.params.get(&#39;user&#39;, &#39;&#39;)

    if name == &#39;&#39;:
        request.errors.add(&#39;url&#39;, &#39;name&#39;, &#39;user is not passed ...&#39;)
    if name in _USERS:
        request.errors.add(&#39;url&#39;, &#39;name&#39;, &#39;This user exists !&#39;)
    else:
        user = { &#39;name&#39;:name, &#39;token&#39;: binascii.b2a_hex(os.urandom(20)) }
        request.validated[&#39;user&#39;] = user
</code></pre></div>
<p>このValidatorを指定したユーザー登録処理を実装します。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">@users.post(validators=validate_unique)
def create_user(request):
    &quot;&quot;&quot;Add a new user&quot;&quot;&quot;
    user = request.validated[&#39;user&#39;]

    _Users[user[&#39;name&#39;]] = user[&#39;token&#39;]

    return { &#39;token&#39;: &#39;%s-%s&#39; % (user[&#39;name&#39;], user[&#39;token&#39;]) }
</code></pre></div>
<p><code>pserve cornice_tutorial.ini</code> でサービスを起動。</p>

<blockquote>
<p>curl -X POST http://localhost:6543/users -d user=ktz</p>
</blockquote>

<p>の場合</p>

<blockquote>
<p>{&quot;token&quot;: &quot;ktz-b&#39;04afcabc1348c9253be856ee81cde78a75185ca9&#39;&quot;}</p>
</blockquote>

<p>という出力が返され、
再度同じリクエストを送ると、</p>

<blockquote>
<p>{&quot;status&quot;: &quot;error&quot;, &quot;errors&quot;: [{&quot;location&quot;: &quot;url&quot;, &quot;description&quot;: &quot;This user exists !&quot;, &quot;name&quot;: &quot;name&quot;}]}</p>
</blockquote>

<p>というエラー出力が、</p>

<blockquote>
<p>curl -X POST http://localhost:6543/users</p>
</blockquote>

<p>の場合、</p>

<blockquote>
<p>{&quot;errors&quot;: [{&quot;description&quot;: &quot;user is not passed &#8230;&quot;, &quot;name&quot;: &quot;name&quot;, &quot;location&quot;: &quot;url&quot;}], &quot;status&quot;: &quot;error&quot;}</p>
</blockquote>

<p>が返され、Validatorが作用しているのが分かります。</p>

<p>また、</p>

<blockquote>
<p>curl http://localhost:6543/users</p>
</blockquote>

<p>のリクエストで、</p>

<blockquote>
<p>{&quot;users&quot;: {&quot;ktz&quot;: &quot;04afcabc1348c9253be856ee81cde78a75185ca9&quot;}}</p>
</blockquote>

<p>と返され、問題なく追加されいるようです。</p>

<h3>つづく</h3>

<h3>補足・・・</h3>

<blockquote>
<p>curl -X POST http://localhost:6543/users -d user=りたりん</p>
</blockquote>

<p>の場合、レスポンスは</p>

<blockquote>
<p>{&quot;token&quot;: &quot;\u308a\u305f\u308a\u3093-b&#39;a1ef940c4259833e8bd21da6b1a32a9b8b7e788f&#39;&quot;}</p>
</blockquote>

<p>のように、日本語が文字参照に変換された形となります。
これは、規定のレンダラである<code>json_renderer</code>が行っています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cornice Tutorial (2)]]></title>
    <link href="http://ritalin.github.io/2013/06-12/cornice-tutorial-02/"/>
    <updated>2013-06-12T00:28:00+09:00</updated>
    <id>http://ritalin.github.io/2013/06-12/cornice-tutorial-02</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<p>引き続き、公式サイトの<a href="http://cornice.readthedocs.org/en/latest/tutorial.html">チュートリアル</a>を写経していきます。
ちなみに完全な和訳を目指しているわけではないです。あしからず。</p>

<!-- more -->

<h2>サービスの作成</h2>

<p>サービスの実装は、<code>cornice_tutorial/views.py</code> に記述するようです。
中身を確認してみると・・・</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&quot;&quot;&quot; Cornice services.
&quot;&quot;&quot;
from cornice import Service


hello = Service(name=&#39;hello&#39;, path=&#39;/&#39;, description=&quot;Simplest app&quot;)


@hello.get()
def get_info(request):
    &quot;&quot;&quot;Returns Hello in JSON.&quot;&quot;&quot;
    return {&#39;Hello&#39;: &#39;World&#39;}
</code></pre></div>
<ul>
<li>6行目がサービスの定義</li>
<li>9 - 12行目がサービス（レスポンス）の実装</li>
</ul>

<p>となってるようです。</p>

<h3>サービス定義で指定するパラメータ</h3>

<p>6行目のサービス定義の中の詳細について、<a href="http://cornice.readthedocs.org/en/latest/api.html">公式マニュアル</a>より引用すると</p>

<ul>
<li>name (<em>Required</em>)

<ul>
<li>サービス名。全体でユニークな者にする必要がある</li>
</ul></li>
<li>path (<em>Required</em>)

<ul>
<li>サービスへのリクエストパス(URI)。全体でユニークする必要がある。</li>
</ul></li>
<li>description (Optional)

<ul>
<li>サービスの説明。</li>
</ul></li>
</ul>

<p>上記以外にもいくつかパラメータが用意されているようですが、それはいずれかの機会にでも・・・</p>

<h3>レスポンスの実装</h3>

<ul>
<li>9行目

<ul>
<li>このサービスで受け入れる(HTTP)メソッド</li>
<li>Get, Post, Put, Delete, Head, Optionが用意されている</li>
</ul></li>
<li>12行目

<ul>
<li>dictとして戻り値を指定することで、JSONオブジェクトとして処理されるHTTPレスポンスが構築される。</li>
<li>ver 0.14時点では、JSONしか返すことができない模様</li>
</ul></li>
</ul>

<p>では、チュートリアルに戻って、ユーザー一覧を実装してみる。
<code>cornice_tutorial/views.py</code> のサービス定義とレスポンス実装を削除し、代わりに以下のように記述。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">users = Service(name=&#39;users&#39;, path=&#39;/users&#39;, description=&quot;ユーザー管理サービス（一覧・追加・削除）&quot;)

_USERS = {}

@users.get()
def list_users(request):
    &quot;&quot;&quot;登録されたすべてのユーザーを列挙 &quot;&quot;&quot;
    return { &#39;users&#39;: _USERS }
</code></pre></div>
<p><code>pserve cornice_tutorial.ini</code> でサービスを起動し、</p>

<blockquote>
<p>curl http://localhost:6543/users</p>
</blockquote>

<p>を実行し、</p>

<blockquote>
<p>{&quot;users&quot;: {}}</p>
</blockquote>

<p>と出力されれば、とりあえずOKということで。</p>

<h3><a href="/2013/07-04/cornice-tutorial-03/">Cornice Tutorial (3)</a>へつづく&#8230;</h3>

<h3>おまけ</h3>

<p>Windows使いは、curlコマンドないので、Powershellから</p>

<blockquote>
<p>invoke-webrequest -method get http://localhost:6543/users</p>
</blockquote>

<p>または</p>

<blockquote>
<p>invoke-restmethod -method get http://localhost:6543/users</p>
</blockquote>

<p>とすればいいのかな？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cornice Tutorial (1)]]></title>
    <link href="http://ritalin.github.io/2013/06-04/cornice-tutorial-01/"/>
    <updated>2013-06-04T23:12:00+09:00</updated>
    <id>http://ritalin.github.io/2013/06-04/cornice-tutorial-01</id>
    <content type="html"><![CDATA[<h2>あらまし</h2>

<p>RESTサーバーを実装するための良いフレームワークはないかなと探していたところ、<a href="http://cornice.readthedocs.org/en/latest/index.html">Cornice</a>というpythonで実装されたフレームワークに出会いました。
CorniceはPyramidというWebアプリケーションフレームワークの上にのるものであり、
Pyramidのtemplate EnginがZPT-TAL由来のCameleonであることを知り、これは触ってみなければという気持ちになりました。</p>

<p>公式サイトには<a href="http://cornice.readthedocs.org/en/latest/tutorial.html">チャットサーバを実装するためのチュートリアル</a>があるので、
これをネタにPythonの勉強をしつつやって行こうかなと思います。</p>

<p>当方、Pythonに関しては、ドがつくほどの素人なので、あり得ない事し出すかも知れませんが生暖かく見守っていただければかと。</p>

<!-- more -->

<h2>環境構築</h2>

<p>公式サイトでは、Python 2.7で進めるようになってます。しかし<a href="https://github.com/mozilla-services/cornice">Github</a>のソースツリー眺めてたらPython 3.3対応ぽいことがコミットログとしてあがって上がっており、試したところとりあえずScaffoldingがうまくいくことが確認できたので、
あえて地雷覚悟でPython 3.3系で進めてみようかと思います。</p>

<h3>インストール</h3>

<blockquote>
<p><em>注意</em></p>

<p>公式サイトのチュートリアルでは、vitualenvで環境を用意してから実行してますが、お好みでどうぞ</p>

<p>私はpythonbrewのvenv上に構築しました。</p>
</blockquote>

<ul>
<li><a href="https://github.com/mozilla-services/cornice">Github</a>よりレポジトリをclone。</li>
</ul>

<blockquote>
<p>git clone git://github.com/mozilla-services/cornice.git</p>
</blockquote>

<ul>
<li>落としてきたソースツリーに入り、インストール実行。</li>
</ul>

<blockquote>
<p>cd /path/to/cornice
python ./setup.py install</p>
</blockquote>

<ul>
<li>インストールがうまくいったか確認。<code>pcreate -l</code>を実行し、以下のようにcorniceが表示されればOK。</li>
</ul>

<blockquote>
<p>Available scaffolds:</p>

<p>&#8230;</p>

<p>cornice:  A Cornice application</p>

<p>&#8230;</p>
</blockquote>

<h3>プロジェクト作成</h3>

<ul>
<li>適当なワークフォルダに行き、以下のコマンドを実行。

<ul>
<li>プロジェクト名は <em>cornice_tutorial</em> とします。</li>
</ul></li>
</ul>

<blockquote>
<p>pcreate -t cornice cornice_tutorial</p>
</blockquote>

<p>ここで、プロジェクト名に、ハイフン(-)は使用しない方がヨサゲ。区切り文字が必要であれば、かわりにアンダースコア(_)を使用する。</p>

<ul>
<li>プロジェクトの中に入り、開発用の実行環境を構成する</li>
</ul>

<blockquote>
<p>cd /path/to/cornice_tutorial</p>

<p>python ./setup.py develop</p>
</blockquote>

<h3>動作確認</h3>

<ul>
<li>以下のコマンドを実行し、サービスを起動する</li>
</ul>

<blockquote>
<p>pserve cornice_tutorial.ini</p>
</blockquote>

<ul>
<li>WEBブラウザで、<code>http://localhost:6543</code>を訪れ、</li>
</ul>

<blockquote>
<p>{&#39;Hello&#39;: &#39;World&#39;}</p>
</blockquote>

<p>と出ればOK。</p>

<h3><a href="/2013/06-12/cornice-tutorial-02/">Cornice Tutorial (2)</a>へつづく・・・</h3>
]]></content>
  </entry>
  
</feed>
