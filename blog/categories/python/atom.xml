<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Since 1975]]></title>
  <link href="http://ritalin.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://ritalin.github.com/"/>
  <updated>2013-06-12T01:11:34+09:00</updated>
  <id>http://ritalin.github.com/</id>
  <author>
    <name><![CDATA[ktz_alias]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cornice Tutorial (2)]]></title>
    <link href="http://ritalin.github.com/2013/06-12/cornice-tutorial-02/"/>
    <updated>2013-06-12T00:28:00+09:00</updated>
    <id>http://ritalin.github.com/2013/06-12/cornice-tutorial-02</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<p>引き続き、公式サイトの<a href="http://cornice.readthedocs.org/en/latest/tutorial.html">チュートリアル</a>を写経していきます。
ちなみに完全な和訳を目指しているわけではないです。あしからず。</p>

<!-- more -->

<h2>サービスの作成</h2>

<p>サービスの実装は、<code>cornice_tutorial/views.py</code> に記述するようです。
中身を確認してみると・・・</p>

<p>```
&quot;&quot;&quot; Cornice services.
&quot;&quot;&quot;
from cornice import Service</p>

<p>hello = Service(name=&#39;hello&#39;, path=&#39;/&#39;, description=&quot;Simplest app&quot;)</p>

<p>@hello.get()
def get_info(request):
    &quot;&quot;&quot;Returns Hello in JSON.&quot;&quot;&quot;
    return {&#39;Hello&#39;: &#39;World&#39;}
```</p>

<ul>
<li>6行目がサービスの定義</li>
<li>9 - 12行目がサービス（レスポンス）の実装</li>
</ul>

<p>となってるようです。</p>

<h3>サービス定義で指定するパラメータ</h3>

<p>6行目のサービス定義の中の詳細について、<a href="http://cornice.readthedocs.org/en/latest/api.html">公式マニュアル</a>より引用すると</p>

<ul>
<li>name (<em>Required</em>)

<ul>
<li>サービス名。全体でユニークな者にする必要がある</li>
</ul></li>
<li>path (<em>Required</em>)

<ul>
<li>サービスへのリクエストパス(URI)。全体でユニークする必要がある。</li>
</ul></li>
<li>description (Optional)

<ul>
<li>サービスの説明。</li>
</ul></li>
</ul>

<p>上記以外にもいくつかパラメータが用意されているようですが、それはいずれかの機会にでも・・・</p>

<h3>レスポンスの実装</h3>

<ul>
<li>9行目

<ul>
<li>このサービスで受け入れる(HTTP)メソッド</li>
<li>Get, Post, Put, Delete, Head, Optionが用意されている</li>
</ul></li>
<li>12行目

<ul>
<li>dictとして戻り値を指定することで、JSONオブジェクトとして処理されるHTTPレスポンスが構築される。</li>
<li>ver 0.14時点では、JSONしか返すことができない模様</li>
</ul></li>
</ul>

<p>では、チュートリアルに戻って、ユーザー一覧を実装してみる。
<code>cornice_tutorial/views.py</code> のサービス定義とレスポンス実装を削除し、代わりに以下のように記述。</p>

<p>```
users = Service(name=&#39;users&#39;, path=&#39;/users&#39;, description=&quot;ユーザー管理サービス（一覧・追加・削除）&quot;)</p>

<p>_USERS = {}</p>

<p>@users.get()
def list_users(request):
    &quot;&quot;&quot;登録されたすべてのユーザーを列挙 &quot;&quot;&quot;
    return { &#39;users&#39;: _USERS }
```</p>

<p><code>pserve cornice_tutorial.ini</code> でサービスを起動し、</p>

<blockquote>
<p>curl http://localhost:6543/users</p>
</blockquote>

<p>を実行し、</p>

<blockquote>
<p>{&quot;users&quot;: {}}</p>
</blockquote>

<p>と出力されれば、とりあえずOKということで。</p>

<h3>つづく...</h3>

<h3>おまけ</h3>

<p>Windows使いは、curlコマンドないので、Powershellから</p>

<blockquote>
<p>invoke-webrequest -method get http://localhost:6543/users</p>
</blockquote>

<p>または</p>

<blockquote>
<p>invoke-restmethod -method get http://localhost:6543/users</p>
</blockquote>

<p>とすればいいのかな？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cornice Tutorial (1)]]></title>
    <link href="http://ritalin.github.com/2013/06-04/cornice-tutorial-01/"/>
    <updated>2013-06-04T23:12:00+09:00</updated>
    <id>http://ritalin.github.com/2013/06-04/cornice-tutorial-01</id>
    <content type="html"><![CDATA[<h2>あらまし</h2>

<p>RESTサーバーを実装するための良いフレームワークはないかなと探していたところ、<a href="http://cornice.readthedocs.org/en/latest/index.html">Cornice</a>というpythonで実装されたフレームワークに出会いました。
CorniceはPyramidというWebアプリケーションフレームワークの上にのるものであり、
Pyramidのtemplate EnginがZPT-TAL由来のCameleonであることを知り、これは触ってみなければという気持ちになりました。</p>

<p>公式サイトには<a href="http://cornice.readthedocs.org/en/latest/tutorial.html">チャットサーバを実装するためのチュートリアル</a>があるので、
これをネタにPythonの勉強をしつつやって行こうかなと思います。</p>

<p>当方、Pythonに関しては、ドがつくほどの素人なので、あり得ない事し出すかも知れませんが生暖かく見守っていただければかと。</p>

<!-- more -->

<h2>環境構築</h2>

<p>公式サイトでは、Python 2.7で進めるようになってます。しかし<a href="https://github.com/mozilla-services/cornice">Github</a>のソースツリー眺めてたらPython 3.3対応ぽいことがコミットログとしてあがって上がっており、試したところとりあえずScaffoldingがうまくいくことが確認できたので、
あえて地雷覚悟でPython 3.3系で進めてみようかと思います。</p>

<h3>インストール</h3>

<blockquote>
<p><em>注意</em></p>

<p>公式サイトのチュートリアルでは、vitualenvで環境を用意してから実行してますが、お好みでどうぞ</p>

<p>私はpythonbrewのvenv上に構築しました。</p>
</blockquote>

<ul>
<li><a href="https://github.com/mozilla-services/cornice">Github</a>よりレポジトリをclone。</li>
</ul>

<blockquote>
<p>git clone git://github.com/mozilla-services/cornice.git</p>
</blockquote>

<ul>
<li>落としてきたソースツリーに入り、インストール実行。</li>
</ul>

<blockquote>
<p>cd /path/to/cornice
python ./setup.py install</p>
</blockquote>

<ul>
<li>インストールがうまくいったか確認。<code>pcreate -l</code>を実行し、以下のようにcorniceが表示されればOK。</li>
</ul>

<blockquote>
<p>Available scaffolds:</p>

<p>...</p>

<p>cornice:  A Cornice application</p>

<p>...</p>
</blockquote>

<h3>プロジェクト作成</h3>

<ul>
<li>適当なワークフォルダに行き、以下のコマンドを実行。

<ul>
<li>プロジェクト名は <em>cornice_tutorial</em> とします。</li>
</ul></li>
</ul>

<blockquote>
<p>pcreate -t cornice cornice_tutorial</p>
</blockquote>

<p>ここで、プロジェクト名に、ハイフン(-)は使用しない方がヨサゲ。区切り文字が必要であれば、かわりにアンダースコア(_)を使用する。</p>

<ul>
<li>プロジェクトの中に入り、開発用の実行環境を構成する</li>
</ul>

<blockquote>
<p>cd /path/to/cornice_tutorial</p>

<p>python ./setup.py develop</p>
</blockquote>

<h3>動作確認</h3>

<ul>
<li>以下のコマンドを実行し、サービスを起動する</li>
</ul>

<blockquote>
<p>pserve cornice_tutorial.ini</p>
</blockquote>

<ul>
<li>WEBブラウザで、<code>http://localhost:6543</code>を訪れ、</li>
</ul>

<blockquote>
<p>{&#39;Hello&#39;: &#39;World&#39;}</p>
</blockquote>

<p>と出ればOK。</p>

<h3><a href="/2013/06-12/cornice-tutorial-02/">Cornice Tutorial (2)</a>へつづく・・・</h3>
]]></content>
  </entry>
  
</feed>
