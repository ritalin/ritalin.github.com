<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rest | Since 1975]]></title>
  <link href="http://ritalin.github.io/blog/categories/rest/atom.xml" rel="self"/>
  <link href="http://ritalin.github.io/"/>
  <updated>2015-06-03T22:18:07+09:00</updated>
  <id>http://ritalin.github.io/</id>
  <author>
    <name><![CDATA[ktz_alias]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RESTful Web APIs 読書メモ Index]]></title>
    <link href="http://ritalin.github.io/2015/03-29/restful-web-api-memo-index/"/>
    <updated>2015-03-29T21:28:40+09:00</updated>
    <id>http://ritalin.github.io/2015/03-29/restful-web-api-memo-index</id>
    <content type="html"><![CDATA[<h2>Restful Web APIs - Index</h2>

<ul>
<li><a href="/2015/03-08/restful-web-api-memo-01/">Chapter 1. Surfing the Web</a></li>
<li><a href="/2015/03-08/restful-web-api-memo-02/">Chapter 2. A Simple API</a></li>
<li><a href="/2015/03-08/restful-web-api-memo-03/">Chapter 3. Resources and Representations</a></li>
<li><a href="/2015/03-08/restful-web-api-memo-04/">Chapter 4. Hypermedia</a></li>
<li><a href="/2015/03-08/restful-web-api-memo-05/">Chapter 5. Domain-Specific Designs</a></li>
<li><a href="/2015/03-08/restful-web-api-memo-06/">Chapter 6. The Collection Pattern</a></li>
<li><a href="/2015/03-09/restful-web-api-memo-07/">Chapter 7. Pure-Hypermedia Designs</a></li>
<li><a href="/2015/03-11/restful-web-api-memo-08/">Chapter 8. Profiles</a></li>
<li><a href="2015/03-19/restful-web-api-memo-09/">Chapter 9. The Design Procedure</a></li>
<li><a href="/2015/03-22/restful-web-api-memo-10/">Chapter 10. The Hypermedia Zoo (Part.1)</a></li>
<li><a href="/2015/03-22/restful-web-api-memo-11/">Chapter 10. The Hypermedia Zoo (Part.2)</a></li>
<li><a href="/2015/03-29/restful-web-api-memo-15/">Chapter 11. HTTP for APIs</a></li>
<li><a href="/2015/03-27/restful-web-api-memo-12/">Chapter 12. Resource Description and Linked Data</a></li>
<li><a href="/2015/03-29/restful-web-api-memo-13/">Chapter 13. CoAP: REST for Embedded Systems</a></li>
<li><a href="/2015/03-29/restful-web-api-memo-14/">Appendix An API Designer’s Guide to the Fielding Dissertation</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RESTful Web APIs 読書メモ(14)]]></title>
    <link href="http://ritalin.github.io/2015/03-29/restful-web-api-memo-14/"/>
    <updated>2015-03-29T21:25:00+09:00</updated>
    <id>http://ritalin.github.io/2015/03-29/restful-web-api-memo-14</id>
    <content type="html"><![CDATA[<h2>Appendix C. An API Designer&#39;s Guide to the Fielding Dissertation</h2>

<h3>アーキテクチャ特性</h3>

<ul>
<li>Low Entry-barrier

<ul>
<li>FTPやTelnetのようにたくさんのコマンドを駆使する必要がない</li>
<li>使い方を学ぶのが容易で、サイト構築も容易</li>
</ul></li>
<li>Extensibility</li>
<li>Distributed Hypermedia</li>
<li>Internet-scale</li>
</ul>

<h3>アーキテクチャ制約</h3>

<ul>
<li>Client-Servet

<ul>
<li>webにおける通信は1:1</li>
</ul></li>
<li>Statelessness

<ul>
<li>クライアントがリクエストを作らなければ、サーバーはクライアントの存在を知らない</li>
</ul></li>
<li>Caching

<ul>
<li>キャッシュから前回のレスポンスを再利用することで、通信を抑える</li>
</ul></li>
<li>Uniform Interface

<ul>
<li>リソースの一意化

<ul>
<li>リソースは安定したURIで一意化される</li>
</ul></li>
<li>表現を通したリソースの操作

<ul>
<li>サーバーはクライアントに表現を送ることで、リソース状態を記述</li>
<li>クライアントはサーバーにアプリケーション状態を送ることでリソース状態を操作する</li>
</ul></li>
<li>自己記述メッセージ

<ul>
<li>すべての情報は、リクエストやレスポンスがリンクを介してメッセージ自身に含まれることを理解する必要がある</li>
</ul></li>
<li>ハイパーメディア制約

<ul>
<li>サーバーはハイパーメディアメニューを送ることでアプリケーション状態を操作する

<ul>
<li>メニューとは、クライアントが自由に操作できるオプション</li>
</ul></li>
</ul></li>
</ul></li>
<li>Layered System

<ul>
<li>クライアントとサーバーの間に入れられたプロキシは不可視</li>
</ul></li>
<li>Code on Demand

<ul>
<li>サーバーはデータと一緒に実行コードを送ることができる</li>
<li>クライアントのリクエストで、自動的に配置される</li>
<li>コードの変更でも自動的に再配置される</li>
</ul></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RESTful Web APIs 読書メモ(13)]]></title>
    <link href="http://ritalin.github.io/2015/03-29/restful-web-api-memo-13/"/>
    <updated>2015-03-29T21:12:33+09:00</updated>
    <id>http://ritalin.github.io/2015/03-29/restful-web-api-memo-13</id>
    <content type="html"><![CDATA[<h2>Chapter 13. CpAP: REST for Embedded Systems</h2>

<ul>
<li>CoAP

<ul>
<li>IOT(Internet of Things)のような低出力組み込み環境用</li>
<li>HTTPの考えを踏襲</li>
<li>ハイパーメディア駆動のRESTful APIが使用可能</li>
</ul></li>
</ul>

<!-- more -->

<h3>CoAP(Constraintrd Application Protocol)</h3>

<ul>
<li>低出力組込み機器むけプロトコル</li>
<li>UDPベース</li>
<li>メソッド

<ul>
<li>GET/POST/PUT/DELETE

<ul>
<li>安全性と冪等性はhttpと同じ</li>
</ul></li>
</ul></li>
<li>CONリクエスト

<ul>
<li>conformableメッセージ</li>
<li>ACKを受け取るまで送り続ける</li>
</ul></li>
<li>NON

<ul>
<li>nonconformableメッセージ</li>
<li>ACKレスポンスを要求しない</li>
</ul></li>
<li>RST

<ul>
<li>resetメッセージ</li>
<li>対象機器を再起動させたりとか</li>
</ul></li>
</ul>

<h4>リクエスト</h4>

<p>&#39;&#39;&#39;
CON [0xbc90]
GET /temperature
Token [0x71]
&#39;&#39;&#39;</p>

<ul>
<li>CON

<ul>
<li>confirmable</li>
<li>0xbc90
    * メッセージID</li>
<li>Token

<ul>
<li>すべてのレスポンスで使われる値</li>
</ul></li>
</ul></li>
</ul>

<h4>レスポンス</h4>

<p>&#39;&#39;&#39;
ACK [0xbc00]
2.05 Content
(Token 0x71)
Content-Format: text/plain ; charset=utf-8
22.5 C
&#39;&#39;&#39;</p>

<ul>
<li>ACK

<ul>
<li>受信</li>
</ul></li>
<li>2.05

<ul>
<li>ステータスコード</li>
</ul></li>
<li>Content-Format

<ul>
<li>httpのcontent-typeと同じ意味</li>
</ul></li>
<li>22.5 C

<ul>
<li>entity-bidy</li>
</ul></li>
</ul>

<h4>Delayed Response</h4>

<ul>
<li>クライアントはCON を送り、サーバーは瞬時にACKを返す</li>
<li>しばらくしサーバーは、別メッセージIDで同トークンをもつCON / NONを送る</li>
</ul>

<h4>Multicast Message</h4>

<ul>
<li>UDP multicastを用いたメッセージを一括配信をサポート</li>
<li>機器間で自律的な検出、データ交換、コラボが可能となる</li>
<li>自律的な振る舞いは、REST制約のハイパーメディアコントロールが重要</li>
</ul>

<h3>CoAE Link Format</h3>

<ul>
<li>media-type

<ul>
<li>application/link-format</li>
</ul></li>
<li>プロトコルセマンティクス

<ul>
<li>GETによるナビゲーションと探索</li>
</ul></li>
<li>アプリケーションセマンティクス

<ul>
<li>ない！</li>
</ul></li>
<li>RFC6690</li>
<li>全体として80Byteな1024Byteに抑えることは、他のフォーマットでは不可能</li>
<li>Http圧縮で帯域幅を抑えても、各機器のスペックでは展開できない</li>
<li>CoAPと異なりhuman-readableフォーマット</li>
</ul>

<h2>つづき・・・</h2>

<p><a href="/2015/03-29/restful-web-api-memo-14/">RESTful Web APIs 読書メモ(14)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[restful-web-api-memo-15]]></title>
    <link href="http://ritalin.github.io/2015/03-29/restful-web-api-memo-15/"/>
    <updated>2015-03-29T13:42:38+09:00</updated>
    <id>http://ritalin.github.io/2015/03-29/restful-web-api-memo-15</id>
    <content type="html"><![CDATA[<h2>Chapter 11. HTTP for APIs</h2>

<ul>
<li>Web APIの技術的スタック

<ul>
<li>ハイパーメディア

<ul>
<li>次は何？に答える</li>
</ul></li>
<li>HTTP

<ul>
<li>リソースとはどのようにしてやりとりするのか？に答える</li>
</ul></li>
<li>URL 

<ul>
<li>リソースはどこにあるのか？に答える</li>
</ul></li>
</ul></li>
</ul>

<!-- more -->

<h3>HTTP仕様</h3>

<ul>
<li>RFC2616</li>
<li>41のレスポンスコードを定義

<ul>
<li>プロトコルセマンティクスの基本セットを表現する</li>
<li>400

<ul>
<li>不正なデータが送りつけられてきた場合</li>
<li>問題点をentity-bodyに示す</li>
</ul></li>
<li>付録A参照</li>
</ul></li>
<li>47のリクエスト / レスポンスヘッダを定義

<ul>
<li>プロトコルセマンティクスの基本セットを提供する</li>
<li>付録B参照</li>
</ul></li>
<li>表現の選択

<ul>
<li>一つのリソースは多くの表現をもつ</li>
<li>表現は異なるフォーマットをもつ</li>
<li>コンテントネゴシエーション

<ul>
<li>Accept-*のセットが提供されている</li>
<li>Accept

<ul>
<li>media-typeの選択</li>
</ul></li>
<li>Accept-Language

<ul>
<li>言語の選択</li>
</ul></li>
<li>対応する表現がない場合、406(Not Acceptable)を返す</li>
</ul></li>
<li>プロファイルネゴシエーション

<ul>
<li>media-typeがprofileパラメータを持つ場合に利用可能</li>
<li>コンテントネゴシエーションと合わせて使用する</li>
</ul></li>
<li>ハイパーメディアメニュー

<ul>
<li>利用可能な表現の一覧を返し、その中からクライアントに選択させる</li>
<li>300(multiple Choices)を返す

<ul>
<li>entity-bodyに選択可能なリンクを提示する</li>
</ul></li>
<li>htmlのaタグ、linkタグはハイパーメディアメニューきのうを持つ

<ul>
<li>type属性

<ul>
<li>media-typeを指定する</li>
</ul></li>
<li>hreflang

<ul>
<li>言語を指定する</li>
</ul></li>
</ul></li>
</ul></li>
<li>正規化URL

<ul>
<li>リソースが一つ以上のURLを持つ場合、代表のURLを明示すること</li>
<li>以下のいずれかを使用

<ul>
<li>Content-Location</li>
<li>canonicalリレーション</li>
</ul></li>
</ul></li>
<li>キャッシュ(Cache-Control)

<ul>
<li>リクエスト

<ul>
<li>キャッシュを使うかどうかの指示</li>
</ul></li>
<li>レスポンス

<ul>
<li>前回のリクエストから変更があったかどうかを伝える</li>
<li>API実装を変更する場合、マイグレーションのために適切にmax-ageを設定すべき</li>
</ul></li>
</ul></li>
<li>Conditional Request
    * リソース状態が変更する場合、適切にmax-ageを決定することは難しい
    * Last-Modified
        * レスポンスで最終更新日時を返す
        * 次回リクエストでIf-Modified-Sinceヘッダに埋め込む
            * リソース状態が変更していない場合、304(Not Modified)を返す
            * 動的、静的コンテンツにかかわらずサーバーリソースを節約できる
            * 次回リクエストのために保存しておく必要がある
    * ETag
        * リソース状態が変更した時のみに変更される文字列
            * リソースをハッシュ化して生成
            * Last-Mofifiedのように、別途保存しておく必要がなくなる
        * 次回リクエストでIf-None-Matchに、ETagの文字列を指定する
        * リソース状態に変更がなければ304(Not Modified)を返す</li>
<li>LBYL(Look Before You Leap) Request

<ul>
<li>entity-bodyのないPUTリクエストを送る</li>
<li>PUTが受け入れ可能な場合、100(Continue)を返す

<ul>
<li>改めて、entity-body付きでPUTリクエストを送る</li>
</ul></li>
<li>PUTが棄却された場合、417(Expection Failed)が返される</li>
</ul></li>
<li>圧縮

<ul>
<li>リクエストヘッダにAccept-Encodingを含める

<ul>
<li>たいていgzip</li>
</ul></li>
<li>サーバーが圧縮アルゴリズムをサポートしていれば、圧縮

<ul>
<li>レスポンスヘッダに同じAccept-Encodingを含める</li>
</ul></li>
</ul></li>
<li>Partial GET

<ul>
<li>表現のサブセットを取得する方法</li>
<li>主にダウンロードを再開する目的でもちいられる</li>
<li>リクエストヘッダに開始位置をRangeに指定

<ul>
<li>単位はkB</li>
</ul></li>
<li>レスポンスコードは206(Partial Content)</li>
<li>レスポンスヘッダにContent-Rangeを含める</li>
<li>コレクションの一部の取得に使えそうだが、非標準

<ul>
<li>自身のプロトコルセマンティクスを検討すべき</li>
<li>prevやnextなどのリンクリレーション</li>
</ul></li>
</ul></li>
<li>HTTPパイプライン

<ul>
<li>クライアントは一度に複数のリクエストを送る</li>
<li>サーバーは受け取った順にレスポンスを返す</li>
<li>GETのみでパイプライン化が望ましい

<ul>
<li>ほかのメソッドとの組み合わせは、途中で切断されてもロールバックできないため</li>
</ul></li>
<li>Web APIとは相性が悪い

<ul>
<li>たいていAPIは、ワークフローとなるため</li>
</ul></li>
</ul></li>
<li>Lost Update問題点をの回避

<ul>
<li>不安定なメソッド(PUT/PATCH)を同時に使われると、後勝ちとなる</li>
<li>先勝ちにしたければConditional Requestを使う

<ul>
<li>Last-Modified

<ul>
<li>If-Unmodifid-Since</li>
</ul></li>
<li>ETag

<ul>
<li>If-None-Match</li>
</ul></li>
</ul></li>
<li>変更されていれば、412(Precondition Failed)が返される</li>
<li>不安定なメソッドには、常にConditional Requestが望ましい

<ul>
<li>利用されていなければ、428(Precondition Required)を返す姿勢で</li>
</ul></li>
</ul></li>
</ul></li>
</ul>

<h3>HTTP認証</h3>

<ul>
<li>Basic認証

<ul>
<li>RFC2617</li>
<li>ユーザー名/パスワードの組で認証</li>
<li>あまりセキュアではない

<ul>
<li>クレデンシャルはBase64エンコードされるだけ</li>
<li>TLSに乗せれば、盗聴を防げるので、多少セキュアになる</li>
</ul></li>
</ul></li>
<li>Digest認証

<ul>
<li>RFC2617</li>
</ul></li>
<li>OAuth 1.0

<ul>
<li>RFC5849</li>
<li>クライアントごとに別々のクレデンシャルを与える</li>
<li>利用者は、トークンクレデンシャルを利用停止にすることで、スパム被害を最小化できる</li>
<li>OAuthプロバイダは、クライアントクレデンシャル(consumer_key)を停止することで、スパム被害を最小化できる</li>
</ul></li>
<li>OAuth 2.0</li>
<li>RFC6749</li>
<li>4つのアクセストークン取得プロセス

<ul>
<li>Authrization Code

<ul>
<li>OAuth 1.0の方法</li>
</ul></li>
<li>Implicit Gant</li>
<li>Resource Owner Password Credential

<ul>
<li>モバイルクライアント向け</li>
</ul></li>
<li>Client Credentials</li>
</ul></li>
</ul>

<h3>HTTP拡張</h3>

<ul>
<li>WebDav</li>
<li>HTTP/2</li>
<li>CoAP</li>
<li>PATCHメソッド

<ul>
<li>RFC5789</li>
<li>安全ではないがベキ等でない</li>
<li>差分更新を可能とする</li>
<li>パッチフォーマット

<ul>
<li>application/json-patch

<ul>
<li>RFC6902</li>
</ul></li>
<li>application/xml-patch+xml

<ul>
<li>RFC5261</li>
</ul></li>
</ul></li>
</ul></li>
<li>LINK/UNLINKメソッド

<ul>
<li>RFC2616(破棄)

<ul>
<li>使い道が見出せなかったため</li>
</ul></li>
<li>安全ではないが冪等</li>
<li>2つのリソースかんを接続(切断) するメソッド</li>
<li>リンク先は、LINKヘッダで指定する</li>
</ul></li>
</ul>

<h3>WebDav</h3>

<ul>
<li>RFC4918</li>
<li>HTTPベースのファイルシステム</li>
<li>利用例

<ul>
<li>MS SharePoint</li>
<li>Subversion</li>
</ul></li>
<li>メソッド

<ul>
<li>MKCOL

<ul>
<li>コレクションの新規作成</li>
</ul></li>
<li>PROPATCH/PROPFIND

<ul>
<li>リソースにキーワードをつけることで、検索しやすくする</li>
</ul></li>
<li>LOCK/UNZlOCK

<ul>
<li>リソースのロック</li>
<li>同時アクセスを防ぐ目的</li>
<li>すでにロックされてれば、408(Conflict)を返す

<ul>
<li>423(Locked)も定義されてるが利用は推奨されていない模様</li>
</ul></li>
</ul></li>
<li>MOVE/COPY

<ul>
<li>リソースの移動またはコピー</li>
<li>目的地は、Destinationヘッダで指定する</li>
</ul></li>
</ul></li>
</ul>

<h3>Http/2</h3>

<ul>
<li>SPDYベースにした進化版</li>
<li>ヘッダ圧縮</li>
<li>同時リクエスト発行</li>
</ul>

<hr>

<h2>つづき・・・</h2>

<p><a href="/2015/03-29/restful-web-api-memo-12/">RESTful Web APIs 読書メモ(12)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RESTful Web APIs 読書メモ(12)]]></title>
    <link href="http://ritalin.github.io/2015/03-27/restful-web-api-memo-12/"/>
    <updated>2015-03-27T22:12:55+09:00</updated>
    <id>http://ritalin.github.io/2015/03-27/restful-web-api-memo-12</id>
    <content type="html"><![CDATA[<h2>Chapter 12. Resource Description and Linked Data</h2>

<ul>
<li>ハイパーメディアフォーマット

<ul>
<li>表現戦略と記述戦略の両方を有する</li>
</ul></li>
</ul>

<!-- more -->

<ul>
<li>表現戦略(Presentation Strategy)

<ul>
<li>リソースのURLにGETリクエストを送り、リソースの表現を受け取ること</li>
</ul></li>
<li>記述戦略(Description Strategy)

<ul>
<li>リソースAがリソースBのURLを知っていること</li>
<li>利点

<ul>
<li>リソースBのなにかを調べるために使用できる</li>
<li>非ハイパーメディアフォーマットにアプリケーションセマンティクスを提供する

<ul>
<li>JSON-LD,&#8230;</li>
</ul></li>
<li>表現を持たないリソースを扱える

<ul>
<li>ISBN,&#8230;</li>
</ul></li>
</ul></li>
</ul></li>
</ul>

<h3>RDF(Resource Description Framework)</h3>

<ul>
<li>media-type

<ul>
<li>application/rdf+xml</li>
<li>text/turtle</li>
<li>&#8230;..</li>
</ul></li>
<li>プロトコルセマンティクス

<ul>
<li>GETによるナビゲーション</li>
</ul></li>
<li>アプリケーションセマンティクス

<ul>
<li>なし</li>
<li>アプリケーションセマンティクスのためのフレームワークという立ち位置
*URIにアプリケーションセマンティクスの意味づけ</li>
</ul></li>
<li>純粋な記述戦略

<ul>
<li>すべてのREST制約を満たせていない</li>
</ul></li>
<li>プロパティ

<ul>
<li>rdf:Description/@about

<ul>
<li>リソースのURIを指定</li>
<li>URLをURIとして扱う</li>
</ul></li>
<li>rdf:type

<ul>
<li>リソースタイプ</li>
<li>リソースはリソースタイプURIで分類できる

<ul>
<li>ジャンル、種別、&#8230;</li>
</ul></li>
</ul></li>
</ul></li>
</ul>

<h3>RDF Schema</h3>

<ul>
<li>リソースタイプについてのプロファイル</li>
<li>低レイヤーのアプリケーションセマンティクス

<ul>
<li>human-readable

<ul>
<li>rdfs:label</li>
<li>rdfs:comment</li>
</ul></li>
<li>machine-readable

<ul>
<li>rdfs:subclassOf

<ul>
<li>ベースとなるコンセプト</li>
</ul></li>
<li>rdfs:domain

<ul>
<li>リレーションの親</li>
<li>入力引数</li>
</ul></li>
<li>rdfs:range

<ul>
<li>リレーションのリンク先</li>
<li>戻り値</li>
<li>このリソースタイプにrfds:domsin突っ込むと、rdfs:rangeとして得られる<br></li>
</ul></li>
</ul></li>
</ul></li>
</ul>

<h3>Linked Data</h3>

<ul>
<li>RDFはRESTfulになれない

<ul>
<li>URLの代わりにURIを使用するため</li>
<li>URIはただの識別子

<ul>
<li>そこからリソース表現が取得できることは保証していない</li>
</ul></li>
<li>machine-readableなアプリケーションセマンティクスを記述するのであればALPSを上回る強力さ</li>
</ul></li>
<li>Linked Data = RDF + 表現戦略</li>
<li>Link Data原則

<ol>
<li>URIはリソースの名前

<ul>
<li>= addressability原則</li>
</ul></li>
<li>URIにリクエストを投げれる

<ul>
<li>URIとして、urnは使用しない</li>
</ul></li>
<li>URIからリソース表現が取得できる</li>
<li>ほかのURIへのリンクを含める

<ul>
<li>= connectednessの原則</li>
<li>そのURIのリソース表現が取得可能とする</li>
</ul></li>
</ol></li>
</ul>

<h3>Linked Dataフォーマット</h3>

<h4>JSON-LD</h4>

<ul>
<li>media-type

<ul>
<li>application/ld+json</li>
</ul></li>
<li>プロトコルセマンティクス

<ul>
<li>GETによるナビゲーション</li>
</ul></li>
<li><p>アプリケーションセマンティクス</p>

<ul>
<li>自己記述式</li>
</ul></li>
<li><p>Linked Data APIを書くなら、断然RDFよりJSON-LDオススメ</p></li>
<li><p>利用方法</p>

<ul>
<li>別リソースとしてLINKヘッダでJSON-LDを指定</li>
<li>直接リソースのメタデータとして埋め込む</li>
</ul></li>
</ul>

<h4>Hydra</h4>

<ul>
<li>media-type

<ul>
<li>application/ld+json</li>
</ul></li>
<li>プロトコルセマンティクス

<ul>
<li>JSON-LD + 任意のHTTPメソッド</li>
<li>supprtedOperationでJSONオブジェクトとして指定</li>
</ul></li>
<li>アプリケーションセマンティクス

<ul>
<li>コレクションパターンを使って自己記述</li>
</ul></li>
</ul>

<h4>XRD/JRD</h4>

<ul>
<li>media-type

<ul>
<li>application/xrd+xml</li>
<li>application/jrd+json</li>
</ul></li>
<li>プロトコルセマンティクス

<ul>
<li>GETによるナビゲーション</li>
</ul></li>
<li>アプリケーションセマンティクス

<ul>
<li>なし</li>
</ul></li>
<li>RFC6415(XRD)</li>
<li>propertyタグ、linkタグでアプリケーションセマンティクスを記述

<ul>
<li>URIを指定するため、存在するかどうかは保証されない</li>
</ul></li>
</ul>

<h4>Web Host Metadata Document</h4>

<ul>
<li>media-type

<ul>
<li>application/xrd+xml</li>
<li>application/jrd+json</li>
</ul></li>
<li>プロトコルセマンティクス

<ul>
<li>GETによるナビゲーション</li>
<li>GETによる限定的なルックアップ

<ul>
<li>linkタグのtemplate属性にURI Templateとして埋め込む</li>
<li>urnであったとしてもリソース表現を取得できる</li>
</ul></li>
</ul></li>
<li>アプリケーションセマンティクス

<ul>
<li>なし</li>
</ul></li>
<li>RFC6415</li>
<li>JSON Hone Document 的存在</li>
</ul>

<h4>Web Finger</h4>

<ul>
<li>media-type

<ul>
<li>application/jrd+json</li>
</ul></li>
<li>プロトコルセマンティクス

<ul>
<li>JRDと同等</li>
</ul></li>
<li>アプリケーションセマンティクス

<ul>
<li>ユーザーアカウント</li>
</ul></li>
</ul>

<h3>Ontrogyカタログ</h3>

<h4>Schema.org RDF</h4>

<ul>
<li>サイト

<ul>
<li>schema.rdfs.org/</li>
</ul></li>
<li>語彙

<ul>
<li>schema.org core schemaにRDFaとして列挙</li>
</ul></li>
<li>セマンティクス

<ul>
<li>オンライン検索したい事象の種類</li>
</ul></li>
</ul>

<h4>FOAF</h4>

<ul>
<li>サイト

<ul>
<li>xmlns.com/foaf/spec/</li>
</ul></li>
<li>語彙

<ul>
<li>サイトよりindex.rdfをダウンロード</li>
</ul></li>
<li><p>セマンティクス</p>

<ul>
<li>人、組織に関すること</li>
</ul></li>
<li><p>非公式の産業標準</p></li>
<li><p>最も有名なRDF Schemaレポジトリ</p></li>
</ul>

<h4>vocab.org</h4>

<ul>
<li>サイト

<ul>
<li>vocab.org/</li>
</ul></li>
<li>語彙

<ul>
<li>いろいろ</li>
</ul></li>
<li>セマンティクス

<ul>
<li>ほんまいろいろ</li>
</ul></li>
</ul>

<hr>

<h2>つづき・・・</h2>

<p><a href="/2015/03-29/restful-web-api-memo-13/">RESTful Web APIs 読書メモ(13)</a></p>
]]></content>
  </entry>
  
</feed>
