<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: modeling | Since 1975]]></title>
  <link href="http://ritalin.github.io/blog/categories/modeling/atom.xml" rel="self"/>
  <link href="http://ritalin.github.io/"/>
  <updated>2015-03-22T10:03:01+09:00</updated>
  <id>http://ritalin.github.io/</id>
  <author>
    <name><![CDATA[ktz_alias]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DCI (Data - Context - Interaction)のパイプライン化]]></title>
    <link href="http://ritalin.github.io/2012/12-27/pipelined-dci/"/>
    <updated>2012-12-27T21:56:00+09:00</updated>
    <id>http://ritalin.github.io/2012/12-27/pipelined-dci</id>
    <content type="html"><![CDATA[<p>なんだか最近、DCIの話題が花盛りですね。</p>

<p>さて、<a href="https://groups.google.com/forum/?fromgroups=#!topic/object-composition/u-aVj_FexM4">Google Group: object-composition</a>にて、DCIとMVCの関係について、面白い考察を行っている人がいます。</p>

<p>曰く、Model表現をViewのための表現に変換するためのRole (Interaction) をContextに組み込むのはどうかと提起しています。</p>

<p>私の中では、アプリケーションにおけるDCIの位置づけは、Modelのなかを覗き込んだときに、そこにいるものと思っています。</p>

<p>Modelの中の構成体ゆえ、View表現を持つことはあまり良いものではないと考えています。
しかし、View表現への変換をRoleとして組み込むのは面白いと思いました。</p>

<p>そこで表題に繋がるわけですが、Model層を構成するDCIをより大きな、Dとみなし、そこにView表現に変換するRoleを組み込んだらどうなのかなと思いました。</p>

<!-- more -->

<p>図にするとこんな感じ
<code>
Context_1
    |- Interraction_1 (View transformation)
    |- Context_2 (Data_1)
           |- Interraction_2 (Model transformation)
           |- Data_2 (Domain data)
</code></p>

<p>Context<em>2の中でドメインデータであるData</em>2がInterraction<em>2と作用し、次いでContext</em>1の中でContext<em>1での生成物とInterraction</em>1が作用する。という処理の流れになります。</p>

<p>言い換えると、Context<em>2の反応の後Context</em>1の反応が行われるというパイプラインを構成していると見ることが出来ます。</p>

<p>アプリケーション全体としては、最終的に出来上がった表現をViewにバインドするというModel - Viewという単純なアーキテクチャにすることができるように思えます。</p>

<p>また、２フェーズのパイプラインを例示しましたが、２フェーズ以上でも同様にパイプをつないでいくだけになります。</p>

<p>うーん、なんてモナディック。</p>
]]></content>
  </entry>
  
</feed>
