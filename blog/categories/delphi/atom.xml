<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: delphi | Since 1975]]></title>
  <link href="http://ritalin.github.com/blog/categories/delphi/atom.xml" rel="self"/>
  <link href="http://ritalin.github.com/"/>
  <updated>2012-12-02T01:10:59+09:00</updated>
  <id>http://ritalin.github.com/</id>
  <author>
    <name><![CDATA[ktz_alias]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Advent Calendar 2012 Winter (Delphi)]]></title>
    <link href="http://ritalin.github.com/2012/12-06/delphi-advent-2012/"/>
    <updated>2012-12-06T00:00:00+09:00</updated>
    <id>http://ritalin.github.com/2012/12-06/delphi-advent-2012</id>
    <content type="html"><![CDATA[<p>これは<a href="http://atnd.org/events/34390">Delphi Advent Calendar 2012</a>参加記事です。</p>

<p>この記事では、依存性逆転(Dependency Inversion)をネタに進めていこうかなと思います。
他の言語でDIコンテナ（依存性注入の方）を使用していて、ふと気づいたので記事にしてみます。</p>

<hr />

<p>普段会社では、いまだにDelphi 7をWindows7のXP Mode上で使ってる身です（主に保守ですが）。なのでDelphi 7 の話です（以降のバージョンは未経験）。</p>

<p>何も考えず、フォームやコンポーネントをプロジェクトに加えていくと、プロジェクトファイルである<code>.dpr</code>に、それらがグローバルオブジェクトとしてインスタンス化されます（グローバル変数にいれてくる）。</p>

<p>よく言われる一般論として、</p>

<ul>
<li>スコープを小さくするかが重要

<ul>
<li> -> グローバル変数もってのほか</li>
</ul>
</li>
<li>ムダなオブジェクトは作らない

<ul>
<li>-> 起動時にインスタンス化とか頭沸いてる</li>
</ul>
</li>
</ul>


<p>あまりよくない、この構造ですが、見方を変えると面白い側面が見えてきます。</p>

<p>実際に使用する時点でインスタンスが決定されている。
別の言い方で、依存が解決されている。</p>

<p>オブジェクトを生成する場合、１クラスだけで終わることは稀で、たいていは複数クラスが絡み合う。
それらはコンストラクタやメソッドの引数、プロパティでセットされるでしょう。
クラス継承が絡むと、組み合わせはさらに増大。</p>

<p>使う側（フォーム等）で</p>

<ul>
<li>自身でインスタンス化する場合

<ul>
<li>具体的なクラス構成をすべて理解しておく必要あり</li>
<li>でないとインスタンスを作れないから</li>
</ul>
</li>
<li>初期化済み

<ul>
<li>内側の具体的な内容が隠される（ように見える）</li>
</ul>
</li>
</ul>


<p>その結果、フォームやコンポーネント</p>

<ul>
<li>独立性が高まる（ように見える）</li>
<li>より再利用可能になる（ように見える）</li>
</ul>


<p>使う人が、使う時点でなく他に任せて、依存を解決。
目を細めてみれば、依存が逆転しているように捉えている気持ちになれます。</p>

<p>インスタンス生成する関数のポインタでの初期化なら、遅延評価も可能</p>
]]></content>
  </entry>
  
</feed>
