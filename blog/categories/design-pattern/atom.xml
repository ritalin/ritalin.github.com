<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: design-pattern | Since 1975]]></title>
  <link href="http://ritalin.github.io/blog/categories/design-pattern/atom.xml" rel="self"/>
  <link href="http://ritalin.github.io/"/>
  <updated>2015-03-27T23:57:16+09:00</updated>
  <id>http://ritalin.github.io/</id>
  <author>
    <name><![CDATA[ktz_alias]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Factoryの具象クラスをインスタンスするのは誰？]]></title>
    <link href="http://ritalin.github.io/2013/01-10/factory-method/"/>
    <updated>2013-01-10T22:04:00+09:00</updated>
    <id>http://ritalin.github.io/2013/01-10/factory-method</id>
    <content type="html"><![CDATA[<h2>Simple Factory</h2>

<p>というのが、デザインパターンとしてあるのですね。今日Twitter上のTLに流れてきて、気になってググってみたら、<a href="http://d.hatena.ne.jp/asakichy/20090414/1239718537">Strategic Choice</a>さんのブログに行き着きました。</p>

<p>Factory Methodとの違いは、Factoryを具象クラス一本に絞ったという感じでしょうか。</p>

<!-- more -->

<h2>Factoryの具象クラスをインスタンスするのは誰？</h2>

<p>さて本題。Factory Methodは、FactoryとProductの両方について、抽象層にインターフェースを設け、具象層に各インターフェースの具象クラスを置きます。ClientオブジェクトはFactoryのインターフェースを通して具象Productを生成し、インターフェースとして取得する形となります。</p>

<p>前から気になっていたのですが、誰かが具象Factoryを生成してあげる必要があります。ClientがFactoryをインスタンス化するのであれば、ClientはProductの実装への依存はなくせますが、依然factoryの実装には依存してしまいます。</p>

<p>じゃぁ、FactoryのためのFactoryが必要？</p>

<p>そのFactoryのためのFactory生成は誰が行うの？</p>

<p>と堂々巡りしてしまい、私の中では「いらない子」扱いのパターンでした。</p>

<h2>DIコンテナさん登場</h2>

<p>Factoryの具象クラスへの依存をどう解決すべきか分からず、もやっとしていたのですが、素直にDIコンテナさんに任せちゃえばいいんじゃないかなと、ここ最近気づきました。</p>

<p>しかし、DIコンテナの機能として、たいてい遅延実行をサポートしているので、遅延実行のための高階関数をFactory代わりにしてしまえる気がします。（使う側のClientはどんな形であれ依存が解決できればいいはずなので）</p>

<p>結局、Factory Methodいらなくね？と、現在進行形で「いらない子」になってるのでした。</p>
]]></content>
  </entry>
  
</feed>
