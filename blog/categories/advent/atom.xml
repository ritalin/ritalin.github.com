<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: advent | Since 1975]]></title>
  <link href="http://ritalin.github.com/blog/categories/advent/atom.xml" rel="self"/>
  <link href="http://ritalin.github.com/"/>
  <updated>2015-03-08T20:00:21+09:00</updated>
  <id>http://ritalin.github.com/</id>
  <author>
    <name><![CDATA[ktz_alias]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[（みんなには内緒だよ）]]></title>
    <link href="http://ritalin.github.com/2012/12-17/hentai-advent-2012/"/>
    <updated>2012-12-17T01:00:00+09:00</updated>
    <id>http://ritalin.github.com/2012/12-17/hentai-advent-2012</id>
    <content type="html"><![CDATA[<p>これは『<a href="http://atnd.org/events/33835">HENTAI Advent Calendar 2012 - 変態アドベントカレンダー</a>』の記事です。</p>

<p><img class="right" src="http://atnd.org/event<em>images/0004/9574/</em>________<em>2012-11-03</em>23.31.02_original.png" title="banner" ></p>

<p>前日（16日目）はs_kozake さんの「<a href="http://ameblo.jp/kozake/entry-11428146545.html">変態ルーレット2.0</a>」でした。</p>

<p>VirtualBoxではサポートされていない、Moac OS X Mountain LionをHackintosh (Hackロム)等に頼ること無くインストールできたので、こっそり後悔します。</p>

<p>実際にやったのはひと月前なので、その時の記憶をもとにお送りいたします（再度インストールするのがメンドイから）</p>

<!-- more -->

<h2>前提</h2>

<ul>
<li>VirtualBoxは、その時点で最新のバージョンをインストールしておく

<ul>
<li>入れた当時は、v4.2.x</li>
</ul></li>
</ul>

<h2>手順</h2>

<h3>インストーラをダウンロードする</h3>

<h4>1. App StoreからMountain Lionを購入（ちゃんと購入しましょう）。</h4>

<p><img class="right" src="../../../images/items/20121217/step1.png" width="300" height="250" title="Step1" ></p>

<h4>2. 自動的にインストーラが起動したら、メニューから「OS X インストールを終了」を選び、即終了させる</h4>

<p><img class="right" src="../../../images/items/20121217/step2.png" title="Step2" ></p>

<h3>ディスクイメージ抽出</h3>

<h4>3. アプリケーションフォルダにインストーラがいるはずなので探し出す</h4>

<ul>
<li>コンテキストメニューの「パッケージの内容を表示」を選び中に入る。</li>
<li>Contents/SharedSupport/InstallESD.dmg があることを確認する。</li>
</ul>

<h4>4. ディスクユーティリティを起動する</h4>

<p><img class="right" src="../../../images/items/20121217/step4.png" title="Step4" ></p>

<ul>
<li>(1)の欄にInstallESD.dmgをD&amp;D</li>
<li><p>(1)の欄にInstallESD.dmgを選択し、(2)「変換」を押す。</p></li>
<li><p>変換先のフォーマットをDVD / CDマスターにし、どっか適当なところに保存する。</p></li>
</ul>

<p><img class="right" src="../../../images/items/20121217/step4-2.png" title="Step4-2" ></p>

<ul>
<li>変換待つ・・・</li>
</ul>

<h3>インストール作業</h3>

<h4>5. VirtualBoxの仮想マシンを追加</h4>

<p><img class="right" src="../../../images/items/20121217/step5.png" title="Step5" ></p>

<pre><code>タイプ：Mac OS X
バージョン：Mac OS X (64 bit)
</code></pre>

<ul>
<li>以降は通常通りすすめて作成する</li>
<li>作成したVMの設定を開き、ストレージのCD /DVDに4.で作成したディスクイメージを指定する。</li>
</ul>

<p><img class="right" src="../../../images/items/20121217/step5-2.png" title="Step5-2" ></p>

<h4>6. VMを実行する</h4>

<p>（ごめんね、画像無くて）</p>

<ul>
<li>再セットアップが開始する（結構時間かかる）</li>
<li><p>VM内のディスクユーティリティを起動し、パーティションをフォーマットする（不要かもしれない）</p>

<ul>
<li>Mac OS 拡張（ジャーナリング）、GUIDパーティションテーブルを選ぶこと</li>
</ul></li>
<li><p>ディスクユーティリティ終了→インストールアプリ起動</p></li>
<li><p>設問に従ってポチポチ</p></li>
<li><p>インストール始まる。</p></li>
</ul>

<p>最後までいくと自動的に再起動する。</p>

<p>完了かと思いきや、インストールがおこなわれてる。</p>

<p>２ループ目は不明だったので、静観してたけど、３ループ目も同じように進もうとしたため、VMを強制停止する（ウインドウ閉じればアラートでる）</p>

<p>たぶんリカバリインストールが始まってたぽい気がする。</p>

<h4>7. VMの設定を開きCD / DVDをアンマウントする</h4>

<h4>8. 再度、VMを実行する</h4>

<p>インストールプロセスの続きが実行された。</p>

<p>言語とかネットワーク設定とか聞いてきたような気がするけど、必須入力以外はすべてスキップしたような（もう覚えてない）</p>

<p>VirtualBoxの関係上なのか、英語版にされる。</p>

<p><img class="right" src="../../../images/items/20121217/evidence.png" title="evidence" ></p>

<h2>そのた、雑多なこと</h2>

<ul>
<li>こんな起動の裏側が見れるよ。</li>
</ul>

<p><img class="right" src="../../../images/items/20121217/omake.png" title="omake" ></p>

<ul>
<li><p>当方、Sanday BridgeのMacBookAir 13&#39;&#39;松特盛りですが、起動に５分ぐらいかかります。気長に待ちましょう。</p></li>
<li><p>２本指スクロール</p></li>
</ul>

<p>はじめ効かないかと思ったけどSnow Leopard基準なので、Mountain Lionと逆なだけでした。</p>

<ul>
<li>放置しておくと、結構な頻度でフリーズ状態になります。しょうがないね。</li>
</ul>

<h2>まとめ</h2>

<p><strong>変態</strong> というよりは、どう見ても、真っクロに限りなく近いクロです。どうもあ（ry</p>

<p>明日(18日目)は<a href="http://maruta.be/linegod/1">nyaarto</a>さんです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rhino.Mocksをちょっとだけ幸せにするお助けクラス]]></title>
    <link href="http://ritalin.github.com/2012/12-08/tdd-advent-2012/"/>
    <updated>2012-12-08T00:00:00+09:00</updated>
    <id>http://ritalin.github.com/2012/12-08/tdd-advent-2012</id>
    <content type="html"><![CDATA[<p>これは<a href="http://atnd.org/events/33846">TDD Advent Calendar jp: 2012</a>参加記事です。</p>

<p>前日（7日目）は、高野将さんの「<a href="http://takanosho.wordpress.com/2012/12/07/tdd-advent-calendar-2012/">TDDにIDEを活用しよう (VS2012+CodeRush Xpress)</a>」でした。</p>

<p>さて、私の方はというと...ATNDの方にコメントで</p>

<blockquote>
<p>windows8から搭載された、名前を出すことがはばかれる例のヤツをNUnitでテストする時の注意点とか（仮）</p>
</blockquote>

<p>なんて書きました。</p>

<p>最大の敵は、なんといってもasync / await機構が対応していなかったためテストが書きづらく、そのための支援クラスをいくつか書いたので、それをさらそうと思っていました。</p>

<p>思っていました....。</p>

<p>そんな折、</p>

<blockquote>
<p><a href="http://www.tdd-net.jp/2012/11/news-nunit-262-.html">NUnit 2.6.2 リリース ～ async/await に対応!</a> (www.tdd-net.jp)</p>
</blockquote>

<p>とのことで、もはや書く意味なくなりました。</p>

<p>なくなりました....。</p>

<p>なので別ネタに切り替えます。
で、最近コツコツ調べてる、<a href="http://www.hibernatingrhinos.com/oss/rhino-mocks">Rhino.Mocks</a>用のお助けクラスを書いたので、それを披露しようかと思います。</p>

<h2>前ふりから...</h2>

<p>Rhino.Mocksのお作法では、</p>

<ol>
<li><code>MockRepository.GenerateMock()</code>でMockインスタンスを生成する</li>
<li>Mockインスタンスに対し、Expect()とReturns()などでもって入り口と出口を差し替える。</li>
<li>走らせる。</li>
<li>最後にVerifyAll()で、通過したか確認</li>
</ol>

<p>という、AAA (Arrange - Act - Assert)スタイルが用いられます。</p>

<p>より下層のユニってテストレベルだと、これで困らないのですが、より上層の振る舞いテストの場合、</p>

<ul>
<li>ネットワークから情報抜き出し</li>
<li>ローカルに保存</li>
</ul>

<p>などのリソースアクセスが複数登場してきます。
より下層のロジックをMock化しようとすると、複数のMockを作成して、各々に対して<code>VerifyAll()</code>を呼ぶというチョーメンドクサイ記述が必要です。</p>

<p>うっかり書き忘れるようものなら、目も当てられません。
まとめてVerify出来ればいいのに....。</p>

<p>実は、静的メソッド<code>MockRepository.GenerateMock()</code>とは別に、</p>

<ol>
<li>MockRepositoryのインスタンスを生成する</li>
<li>CreateMock〜()を呼んで、Mockインスタンスを生成する</li>
<li>以下同文</li>
</ol>

<p>というように、１つのレポジトリから複数のMockを生成することが出来ます。
最後に、MockRepositoryのVerifyAll()を呼んでやれば、まとめて通過検証ができると。</p>

<p>やってみました....。</p>

<p>残念、最初のA、つまりArrangeを行ってくれません。
従って、Mockを通過しないので、各MockのVerifyAll()がことごとく失敗します。
理由は、個々のMockに対し、MockRepository.Replay()が呼ぶ必要があるからです。</p>

<h2>SO・KO・DE</h2>

<p>ヘルパクラス書いちゃいました。
<a href="https://gist.github.com/4147464">4147464</a> A Helper class to support uniform management of generared mock / stub for Rhino.Mocks.
<div><script src='https://gist.github.com/4147464.js?file=RhinoMocksCreationExtensions.cs'></script>
<noscript><pre><code>using System;
using Rhino.Mocks;

namespace Samples {
    internal static class RhinoMocksCreationExtensions {
        /// &lt;summary&gt;Generates a stub without needing a &lt;see cref=&quot;MockRepository&quot;/&gt;&lt;/summary&gt;
        /// &lt;param name=&quot;argumentsForConstructor&quot;&gt;Arguments for &lt;typeparamref name=&quot;T&quot;/&gt;'s constructor&lt;/param&gt;
        /// &lt;typeparam name=&quot;T&quot;&gt;The &lt;see cref=&quot;Type&quot;/&gt; of stub to create.&lt;/typeparam&gt;
        /// &lt;returns&gt;The stub&lt;/returns&gt;
        /// &lt;seealso cref=&quot;Stub{T}&quot;/&gt;
        public static T GenerateStubHelper&lt;T&gt;(this MockRepository repository, params object[] argumentsForConstructor) where T : class {
            return CreateMockInReplay(repository, repo =&gt; (T)repo.Stub(typeof(T), argumentsForConstructor));
        }

        /// &lt;summary&gt;Generates a stub without needing a &lt;see cref=&quot;MockRepository&quot;/&gt;&lt;/summary&gt;
        /// &lt;param name=&quot;type&quot;&gt;The &lt;see cref=&quot;Type&quot;/&gt; of stub.&lt;/param&gt;
        /// &lt;param name=&quot;argumentsForConstructor&quot;&gt;Arguments for the &lt;paramref name=&quot;type&quot;/&gt;'s constructor.&lt;/param&gt;
        /// &lt;returns&gt;The stub&lt;/returns&gt;
        /// &lt;seealso cref=&quot;Stub&quot;/&gt;
        public static object GenerateStubHelper(this MockRepository repository, Type type, params object[] argumentsForConstructor) {
            return CreateMockInReplay(repository, repo =&gt; repo.Stub(type, argumentsForConstructor));
        }

        /// &lt;summary&gt;Generate a mock object without needing a &lt;see cref=&quot;MockRepository&quot;/&gt;&lt;/summary&gt;
        /// &lt;typeparam name=&quot;T&quot;&gt;type &lt;see cref=&quot;Type&quot;/&gt; of mock object to create.&lt;/typeparam&gt;
        /// &lt;param name=&quot;argumentsForConstructor&quot;&gt;Arguments for &lt;typeparamref name=&quot;T&quot;/&gt;'s constructor&lt;/param&gt;
        /// &lt;returns&gt;the mock object&lt;/returns&gt;
        /// &lt;seealso cref=&quot;DynamicMock{T}&quot;/&gt;
        public static T GenerateMockHelper&lt;T&gt;(this MockRepository repository, params object[] argumentsForConstructor) where T : class {
            return CreateMockInReplay(repository, r =&gt; r.DynamicMock&lt;T&gt;(argumentsForConstructor));
        }

        /// &lt;summary&gt;Generate a multi-mock object without needing a &lt;see cref=&quot;MockRepository&quot;/&gt;&lt;/summary&gt;
        /// &lt;typeparam name=&quot;T&quot;&gt;The &lt;c&gt;typeof&lt;/c&gt; object to generate a mock for.&lt;/typeparam&gt;
        /// &lt;typeparam name=&quot;TMultiMockInterface1&quot;&gt;A second interface to generate a multi-mock for.&lt;/typeparam&gt;
        /// &lt;param name=&quot;argumentsForConstructor&quot;&gt;Arguments for &lt;typeparamref name=&quot;T&quot;/&gt;'s constructor&lt;/param&gt;
        /// &lt;returns&gt;the multi-mock object&lt;/returns&gt;
        /// &lt;seealso cref=&quot;DynamicMultiMock(System.Type,System.Type[],object[])&quot;/&gt;
        public static T GenerateMockHelper&lt;T, TMultiMockInterface1&gt;(this MockRepository repository, params object[] argumentsForConstructor) {
            return (T)RhinoMocksCreationExtensions.GenerateMockHelper(
                repository,
                typeof(T), new Type[] { typeof(TMultiMockInterface1) }, argumentsForConstructor);
        }

        /// &lt;summary&gt;Generate a multi-mock object without without needing a &lt;see cref=&quot;MockRepository&quot;/&gt;&lt;/summary&gt;
        /// &lt;typeparam name=&quot;T&quot;&gt;The &lt;c&gt;typeof&lt;/c&gt; object to generate a mock for.&lt;/typeparam&gt;
        /// &lt;typeparam name=&quot;TMultiMockInterface1&quot;&gt;An interface to generate a multi-mock for.&lt;/typeparam&gt;
        /// &lt;typeparam name=&quot;TMultiMockInterface2&quot;&gt;A second interface to generate a multi-mock for.&lt;/typeparam&gt;
        /// &lt;param name=&quot;argumentsForConstructor&quot;&gt;Arguments for &lt;typeparamref name=&quot;T&quot;/&gt;'s constructor&lt;/param&gt;
        /// &lt;returns&gt;the multi-mock object&lt;/returns&gt;
        /// &lt;seealso cref=&quot;DynamicMultiMock(Type,Type[],object[])&quot;/&gt;
        public static T GenerateMockHelper&lt;T, TMultiMockInterface1, TMultiMockInterface2&gt;(this MockRepository repository, params object[] argumentsForConstructor) {
            return (T)RhinoMocksCreationExtensions.GenerateMockHelper(
                repository,
                typeof(T), new Type[] { typeof(TMultiMockInterface1), typeof(TMultiMockInterface2) }, argumentsForConstructor
            );
        }

        /// &lt;summary&gt;Creates a multi-mock without without needing a &lt;see cref=&quot;MockRepository&quot;/&gt;&lt;/summary&gt;
        /// &lt;param name=&quot;type&quot;&gt;The type of mock to create, this can be a class&lt;/param&gt;
        /// &lt;param name=&quot;extraTypes&quot;&gt;Any extra interfaces to add to the multi-mock, these can only be interfaces.&lt;/param&gt;
        /// &lt;param name=&quot;argumentsForConstructor&quot;&gt;Arguments for &lt;paramref name=&quot;type&quot;/&gt;'s constructor&lt;/param&gt;
        /// &lt;returns&gt;the multi-mock object&lt;/returns&gt;
        /// &lt;seealso cref=&quot;DynamicMultiMock(System.Type,System.Type[],object[])&quot;/&gt;
        public static object GenerateMockHelper(this MockRepository repository, Type type, Type[] extraTypes, params object[] argumentsForConstructor) {
            return CreateMockInReplay(repository, r =&gt; r.DynamicMultiMock(type, extraTypes, argumentsForConstructor));
        }

        ///&lt;summary&gt;Creates a strict mock without without needing a &lt;see cref=&quot;MockRepository&quot;/&gt;&lt;/summary&gt;
        ///&lt;param name=&quot;argumentsForConstructor&quot;&gt;Any arguments required for the &lt;typeparamref name=&quot;T&quot;/&gt;'s constructor&lt;/param&gt;
        ///&lt;typeparam name=&quot;T&quot;&gt;The type of mock object to create.&lt;/typeparam&gt;
        ///&lt;returns&gt;The mock object with strict replay semantics&lt;/returns&gt;
        /// &lt;seealso cref=&quot;StrictMock{T}&quot;/&gt;
        public static T GenerateStrictMockHelper&lt;T&gt;(this MockRepository repository, params object[] argumentsForConstructor) {
            return CreateMockInReplay(repository, r =&gt; r.StrictMock&lt;T&gt;(argumentsForConstructor));
        }

        ///&lt;summary&gt;Creates a strict multi-mock without needing a &lt;see cref=&quot;MockRepository&quot;/&gt;&lt;/summary&gt;
        ///&lt;param name=&quot;argumentsForConstructor&quot;&gt;Any arguments required for the &lt;typeparamref name=&quot;T&quot;/&gt;'s constructor&lt;/param&gt;
        ///&lt;typeparam name=&quot;T&quot;&gt;The type of mock object to create, this can be a class.&lt;/typeparam&gt;
        ///&lt;typeparam name=&quot;TMultiMockInterface1&quot;&gt;An interface to generate a multi-mock for, this must be an interface!&lt;/typeparam&gt;
        ///&lt;returns&gt;The multi-mock object with strict replay semantics&lt;/returns&gt;
        /// &lt;seealso cref=&quot;StrictMultiMock(System.Type,System.Type[],object[])&quot;/&gt;
        public static T GenerateStrictMockHelper&lt;T, TMultiMockInterface1&gt;(this MockRepository repository, params object[] argumentsForConstructor) {
            return (T)RhinoMocksCreationExtensions.GenerateStrictMockHelper(
                repository,
                typeof(T), new Type[] { typeof(TMultiMockInterface1) }, argumentsForConstructor
            );
        }

        ///&lt;summary&gt;Creates a strict multi-mock without needing a &lt;see cref=&quot;MockRepository&quot;/&gt;&lt;/summary&gt;
        ///&lt;param name=&quot;argumentsForConstructor&quot;&gt;Any arguments required for the &lt;typeparamref name=&quot;T&quot;/&gt;'s constructor&lt;/param&gt;
        ///&lt;typeparam name=&quot;T&quot;&gt;The type of mock object to create, this can be a class.&lt;/typeparam&gt;
        ///&lt;typeparam name=&quot;TMultiMockInterface1&quot;&gt;An interface to generate a multi-mock for, this must be an interface!&lt;/typeparam&gt;
        ///&lt;typeparam name=&quot;TMultiMockInterface2&quot;&gt;A second interface to generate a multi-mock for, this must be an interface!&lt;/typeparam&gt;
        ///&lt;returns&gt;The multi-mock object with strict replay semantics&lt;/returns&gt;
        ///&lt;seealso cref=&quot;StrictMultiMock(System.Type,System.Type[],object[])&quot;/&gt;
        public static T GenerateStrictMockHelper&lt;T, TMultiMockInterface1, TMultiMockInterface2&gt;(this MockRepository repository, params object[] argumentsForConstructor) {
            return (T)RhinoMocksCreationExtensions.GenerateStrictMockHelper(
                repository,
                typeof(T), new Type[] { typeof(TMultiMockInterface1), typeof(TMultiMockInterface2) }, argumentsForConstructor
            );
        }

        ///&lt;summary&gt;Creates a strict multi-mock without needing a &lt;see cref=&quot;MockRepository&quot;/&gt;&lt;/summary&gt;
        ///&lt;param name=&quot;type&quot;&gt;The type of mock object to create, this can be a class&lt;/param&gt;
        ///&lt;param name=&quot;extraTypes&quot;&gt;Any extra interfaces to generate a multi-mock for, these must be interaces!&lt;/param&gt;
        ///&lt;param name=&quot;argumentsForConstructor&quot;&gt;Any arguments for the &lt;paramref name=&quot;type&quot;/&gt;'s constructor&lt;/param&gt;
        ///&lt;returns&gt;The strict multi-mock object&lt;/returns&gt;
        /// &lt;seealso cref=&quot;StrictMultiMock(System.Type,System.Type[],object[])&quot;/&gt;
        public static object GenerateStrictMockHelper(this MockRepository repository, Type type, Type[] extraTypes, params object[] argumentsForConstructor) {
            if (extraTypes == null) extraTypes = new Type[0];
            if (argumentsForConstructor == null) argumentsForConstructor = new object[0];

            return CreateMockInReplay(repository, r =&gt; r.StrictMultiMock(type, extraTypes, argumentsForConstructor));
        }

        ///&lt;summary&gt;
        ///&lt;/summary&gt;
        ///&lt;param name=&quot;argumentsForConstructor&quot;&gt;&lt;/param&gt;
        ///&lt;typeparam name=&quot;T&quot;&gt;&lt;/typeparam&gt;
        ///&lt;returns&gt;&lt;/returns&gt;
        public static T GeneratePartialMockHelper&lt;T&gt;(this MockRepository repository, params object[] argumentsForConstructor) {
            return (T)RhinoMocksCreationExtensions.GeneratePartialMockHelper(
                repository,
                typeof(T), new Type[0], argumentsForConstructor
            );
        }

        ///&lt;summary&gt;
        ///&lt;/summary&gt;
        ///&lt;param name=&quot;argumentsForConstructor&quot;&gt;&lt;/param&gt;
        ///&lt;typeparam name=&quot;T&quot;&gt;&lt;/typeparam&gt;
        ///&lt;typeparam name=&quot;TMultiMockInterface1&quot;&gt;&lt;/typeparam&gt;
        ///&lt;returns&gt;&lt;/returns&gt;
        public static T GeneratePartialMockHelper&lt;T, TMultiMockInterface1&gt;(this MockRepository repository, params object[] argumentsForConstructor) {
            return (T)RhinoMocksCreationExtensions.GeneratePartialMockHelper(
                repository,
                typeof(T), new Type[] { typeof(TMultiMockInterface1) }, argumentsForConstructor
            );
        }

        ///&lt;summary&gt;
        ///&lt;/summary&gt;
        ///&lt;param name=&quot;argumentsForConstructor&quot;&gt;&lt;/param&gt;
        ///&lt;typeparam name=&quot;T&quot;&gt;&lt;/typeparam&gt;
        ///&lt;typeparam name=&quot;TMultiMockInterface1&quot;&gt;&lt;/typeparam&gt;
        ///&lt;typeparam name=&quot;TMultiMockInterface2&quot;&gt;&lt;/typeparam&gt;
        ///&lt;returns&gt;&lt;/returns&gt;
        public static T GeneratePartialMockHelper&lt;T, TMultiMockInterface1, TMultiMockInterface2&gt;(this MockRepository repository, params object[] argumentsForConstructor) {
            return (T)RhinoMocksCreationExtensions.GeneratePartialMockHelper(
                repository,
                typeof(T), new Type[] { typeof(TMultiMockInterface1), typeof(TMultiMockInterface2) }, argumentsForConstructor
            );
        }

        ///&lt;summary&gt;
        ///&lt;/summary&gt;
        ///&lt;param name=&quot;type&quot;&gt;&lt;/param&gt;
        ///&lt;param name=&quot;extraTypes&quot;&gt;&lt;/param&gt;
        ///&lt;param name=&quot;argumentsForConstructor&quot;&gt;&lt;/param&gt;
        ///&lt;returns&gt;&lt;/returns&gt;
        public static object GeneratePartialMockHelper(this MockRepository repository, Type type, Type[] extraTypes, params object[] argumentsForConstructor) {
            return CreateMockInReplay(repository, r =&gt; r.PartialMultiMock(type, extraTypes, argumentsForConstructor));
        }

        /// &lt;summary&gt;
        /// Generate a mock object with dynamic replay semantics and remoting without needing the mock repository
        /// &lt;/summary&gt;
        public static T GenerateDynamicMockWithRemotingHelper&lt;T&gt;(this MockRepository repository, params object[] argumentsForConstructor) {
            return CreateMockInReplay(repository, r =&gt; r.DynamicMockWithRemoting&lt;T&gt;(argumentsForConstructor));
        }

        /// &lt;summary&gt;
        /// Generate a mock object with strict replay semantics and remoting without needing the mock repository
        /// &lt;/summary&gt;
        public static T GenerateStrictMockWithRemotingHelper&lt;T&gt;(this MockRepository repository, params object[] argumentsForConstructor) where T : class {
            return CreateMockInReplay(repository, r =&gt; r.StrictMockWithRemoting&lt;T&gt;(argumentsForConstructor));
        }

        private static T CreateMockInReplay&lt;T&gt;(MockRepository repository, Func&lt;MockRepository, T&gt; createMock) {
            var mockObject = createMock(repository);
            repository.Replay(mockObject);

            return mockObject;
        }
    }
}
</code></pre></noscript></div>
</p>

<p>なんてことはない、ただの拡張クラスです。しかもMockRepositoryAAA.csまるパクリ。</p>

<p>MockRepositoryの静的メソッドと同じ名前の拡張メソッドには出来なかったため、〜Helperというメソッド名にしていますが、引数は基本おなじはずです。</p>

<ol>
<li>MockRepositoryのインスタンスを生成する</li>
<li>GenerateMockHelper()を呼んで、Mockインスタンスを生成する</li>
<li>以下同文</li>
</ol>

<p>最後に、MockRepository.VerifyAll()を呼べば、まとめて通過検証できます。</p>

<p>やっつけで作ったものですが、それとなく使えているので、個人的に重宝してます。</p>

<p>明日（9日目）は、<a href="http://d.hatena.ne.jp/setoazusa/20121209/1355056720">せとあずさ♂</a>さんです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delphiとか依存性注入とか]]></title>
    <link href="http://ritalin.github.com/2012/12-06/delphi-advent-2012/"/>
    <updated>2012-12-06T00:00:00+09:00</updated>
    <id>http://ritalin.github.com/2012/12-06/delphi-advent-2012</id>
    <content type="html"><![CDATA[<p>これは<a href="http://atnd.org/events/34390">Delphi Advent Calendar 2012</a>参加記事です。</p>

<p>他の言語でDIコンテナ（依存性注入の方）を使用していて、ふと気づいたDI（依存性逆転の方)ついて、つらつらと。</p>

<hr>

<p>普段会社では、いまだにDelphi 7をWindows7のXP Mode上で使ってる身です（主に保守ですが）。なのでDelphi 7 の話です（以降のバージョンは未経験）。</p>

<p>何も考えず、フォームやコンポーネントをプロジェクトに加えていくと、プロジェクトファイルである<code>.dpr</code>にてインスタンス化されます。</p>

<p><div><script src='https://gist.github.com/4193781.js?file='></script>
<noscript><pre><code>program Project1;

uses
  Forms,
  Unit1 in 'Unit1.pas' {Form1},
  Unit2 in 'Unit2.pas' {DataModule2: TDataModule};

{$R *.res}

begin
  Application.Initialize;
  Application.CreateForm(TForm1, Form1);
  Application.CreateForm(TDataModule2, DataModule2);
  Application.Run;
end.
</code></pre></noscript></div>
</p>

<p>Form1やDataModule2はそれぞれのソースファイルで宣言されたグローバル変数で、コンポーネントのインスタンスが初期化されてます。</p>

<p>よく言われる一般論として、</p>

<ul>
<li>スコープを小さくするかが重要

<ul>
<li> -&gt; グローバル変数もってのほか</li>
</ul></li>
<li>ムダなオブジェクトは作らない

<ul>
<li>-&gt; 起動時にインスタンス化とか頭沸いてる</li>
</ul></li>
</ul>

<p>そのため私はよくこれらのグローバル変数の宣言を削除し、使う直前でインスタンス化するように変更したりしてます。
ところで、このグローバル変数に起動時に突っ込む挙動、見方を変えると面白い側面が見えてきます。</p>

<p>実際に使用する時点で、確実に初期化が完了しており、インスタンスが決定されている。
別の言い方で、依存が解決されているともいえる。</p>

<p>オブジェクトを生成する場合、１クラスだけで終わることは稀で、たいていは複数クラスが絡み合う。
それらはコンストラクタやメソッドの引数、プロパティでセットされるでしょう。
クラス継承が絡むと、組み合わせはさらに増大。</p>

<p>使う側（フォーム等）で</p>

<ul>
<li>自身でインスタンス化する場合

<ul>
<li>具体的なクラス構成をすべて理解しておく必要あり</li>
<li>でないとインスタンスを作れないから</li>
</ul></li>
<li>初期化済み

<ul>
<li>内側の具体的な内容が隠される（ように見える）</li>
</ul></li>
</ul>

<p>その結果、フォームやコンポーネント</p>

<ul>
<li>独立性が高まる（ように見える）</li>
<li>より再利用可能になる（ように見える）</li>
</ul>

<p>使う人が、使う時点でなく他に任せて、依存を解決。
目を細めてみれば、依存が逆転しているように捉えている気がする今日この頃。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent Calendar 2012 Winter (C#)]]></title>
    <link href="http://ritalin.github.com/2012/12-02/csharp-advent-2012/"/>
    <updated>2012-12-02T00:00:00+09:00</updated>
    <id>http://ritalin.github.com/2012/12-02/csharp-advent-2012</id>
    <content type="html"><![CDATA[<p>これは<a href="http://atnd.org/events/33905">C# Advent Calender 2012</a>参加記事です。</p>

<p>今年の2月〜10月の間、<a href="http://msdn.microsoft.com/ja-jp/windows/apps/">Windows8の名前を発してはいけないアプリ</a>を開発していて、その間にいくつか小道具を作っては<a href="https://gist.github.com">gist</a>に放り込んだので、使えるもの使えないものひっくるめて、大掃除がてら、いくつか紹介いたします。</p>

<h3><a href="https://gist.github.com/2418469">gist: 2418469</a> A helper class to extract property-names of ViewModel for MVVM.</h3>

<p><div><script src='https://gist.github.com/2418469.js?file=PropertyCategoryMapper.cs'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace Utils {
    [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]
    public class PropertyCategoryAttribute : System.Attribute {
        public PropertyCategoryAttribute(Type inTagType) {
            this.Tag = inTagType;
        }

        public Type Tag { get; internal set; }
    }

    public class PropertyCategoryMapper {
        public static PropertyCategoryMapper Create&lt;TViewModel&gt;() {
            return new PropertyCategoryMapper(typeof(TViewModel));
        }

        public static PropertyCategoryMapper Create(Type inType) {
            return new PropertyCategoryMapper(inType);
        }

        private Dictionary&lt;Type, string[]&gt; mTagMap;

        private PropertyCategoryMapper(Type inType) {
            mTagMap = (
                inType.GetTypeInfo().DeclaredProperties
                .Where(p =&gt; p.CanRead)
                .SelectMany(p =&gt; {
                    return p.GetCustomAttributes&lt;PropertyCategoryAttribute&gt;(true).Select(attr =&gt; {
                        return new KeyValuePair&lt;Type, string&gt;(attr.Tag, p.Name);
                    });
                })
                .GroupBy(pair =&gt; pair.Key, pair =&gt; pair.Value)
                .ToDictionary(pair =&gt; pair.Key, pair =&gt; pair.ToArray())
            );
        }

        public string[] ToProprtyNames(Type inTag) {
            return ToProprtyNamesCore(inTag);
        }

        public string[] ToProprtyNames&lt;TCategoryTag&gt;() {
            return ToProprtyNamesCore(typeof(TCategoryTag));
        }

        private string[] ToProprtyNamesCore(Type inTag) {
            string[] props;

            if (mTagMap.TryGetValue(inTag, out props)) {
                return props;
            }
            else {
                return new string[0];
            }
        }
    }
}
</code></pre></noscript></div>
</p>

<p>WPFでMVVM的なことをやってて、いつも気になるのが <code>INotifyPropertyChanged.PropertyChanged</code> イベントを介して通知を行う際の引数。</p>

<p>あの文字列で渡すってのが、もう気に入らないです（個人的感想です）。
カターンゼンじゃないし...（個人的感想です）。
C# 5.0からは、<code>CallerInfoAttribute</code>が追加されて、幾分楽にはなってるっぽいですが、read-onlyなプロパティにも値をセットしなきゃならんとかチョーメンドイわけです（個人的感想です）。</p>

<p>文字列は自由に表現が出来る分、記述間違いにかどうかは実行時でないと分からない問題を持っていますので、できるだけコンパイル時に蹴ってもらえるよう、専用の型を与えたいと思っていました。
そこで、上のようなコード書いてみました。</p>

<p>使い方は以下のように。。。
<div><script src='https://gist.github.com/2418469.js?file=PropertyCategoryTestViewModel.cs'></script>
<noscript><pre><code>    namespace TestTag {
        public interface Unknown {}
        public interface Numeric {}
        public interface Strings {}
        public interface Dates {}
        public interface Custom1 {}
        public interface Custom2 {}
    }

    internal class PropertyCategoryTestViewModel : INotifyPropertyChanged {
        private PropertyCategoryMapper mMapper;

        private DateTime mCreatedAt = DateTime.Now;
        private DateTime mModifiedAt = DateTime.Now;

        public PropertyCategoryTestViewModel() {
           mMapper = PropertyCategoryMapper.Create(this.GetType());
        }

        public event PropertyChanged;

        protected void OnPropertyChanged(string[] inNames) {
            if (this.PropertyChanged != null) {
                foreach (var name in inNames) {
                    this.PropertyChanged(name);
                }
            }
        }

        public void DoHoge() {
            // Do something ...

            this.OnPropertyChanged(mMapper.ToProprtyNames&lt;TestTag.Numeric&gt;());
        }

        [PropertyCategory(typeof(TestTag.Numeric))]
        public int Value1 { get; set; }

        [PropertyCategory(typeof(TestTag.Numeric))]
        [PropertyCategory(typeof(TestTag.Custom1))]
        public int Value2 { get; set; }

        [PropertyCategory(typeof(TestTag.Numeric))]
        [PropertyCategory(typeof(TestTag.Custom2))]
        public double Num1 { get; set; }

        [PropertyCategory(typeof(TestTag.Strings))]
        [PropertyCategory(typeof(TestTag.Custom2))]
        public string Text1 { get; set; }

        [PropertyCategory(typeof(TestTag.Dates))]
        [PropertyCategory(typeof(TestTag.Custom1))]
        [PropertyCategory(typeof(TestTag.Custom2))]
        public DateTime CreatedAt {
            get {
                return mCreatedAt;
            }
        }

        [PropertyCategory(typeof(TestTag.Dates))]
        public DateTime ModifiedAt { 
            get {
                return mModifiedAt;
            }
        }
    }
}</code></pre></noscript></div>
</p>

<p>プロパティに<code>PropertyCategoryAttribute(Type)</code>を付与します。
コンストラクタで、<code>PropertyCategoryMapper</code>をインスタンス化します。
View Modelの各処理の通知個所で、<code>ToProprtyNames&lt;SomeType&gt;()</code>を呼ぶことで、すべての対象のプロパティ名が取得できます。
複数の<code>PropertyCategory</code>属性を付けておけば、タグごとに通知するプロパティを切り替えることが出来るようになります。</p>

<p>参考までに、このgistには、テストコードも付けてます。</p>

<p>本当は<code>PropertyCategory</code>属性の引数に列挙値(enum)を渡したかったのですが、<code>Attribute</code>の仕様で定数、Typeまたはそれらの配列しか認められていなかったため、代わりにinterfaceを使用しました。</p>

<p>それと１回だけとはいえ、リフレクションに頼ってしまったのも辛いところです。しかし、世界中の誰かがきっと、ろずりーんでコンパイル時に生成するコードを書いてくれると信じています。私は、にわかなのでムリです。</p>

<p>以下、疲れたので簡単に。。。</p>

<h3><a href="https://gist.github.com/3521721">3521721</a> Any filter extension</h3>

<p><div><script src='https://gist.github.com/3521721.js?file=EnumerableAnyExtensions.cs'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;

namespace Sample {
    public static class EnumerableAnyExtensions {
        public static IEnumerable&lt;TSource&gt; WhereAny&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; inSelf, params Func&lt;TSource, bool&gt;[] inFilters) {
            return inSelf.Where(
                source =&gt; inFilters.Any(fn =&gt; fn(source))
            );
        }

        public static int CountAny&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; inSelf, params Func&lt;TSource, bool&gt;[] inFilters) {
            return inSelf.Count(
                source =&gt; inFilters.Any(fn =&gt; fn(source))
            );
        }
    }
}
</code></pre></noscript></div>
</p>

<p>何となく思いついた、<code>Enumerable.Where</code>でOr (||) を指定するのと同じものです。
Orでもいいんだけど、どこで改行したらいいか分からなくなってイヤーンだし、個々の述語関数使い回したかったし、という理由で作っちゃいました。ホントただの俺得です。</p>

<p>つい最近気づきましたが、<code>Enumerable.Where</code>って、要素とインデックスが渡されるオーバーロードがあったんですね。
なので作ってはないんですの。</p>

<p>もう一つ、俺得クラスとして、コレクションの<code>full outer join</code>書いたけど、gistにあげ忘れてたから省略。てへへ。</p>

<h3><a href="https://gist.github.com/3046512">3046512</a> Maybeモナドの写経</h3>

<p><div><script src='https://gist.github.com/3046512.js?file=Maybe.cs'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Common.Test {
    public class Maybe&lt;TValue&gt; {
        public static readonly Maybe&lt;TValue&gt; Nothing = new Maybe&lt;TValue&gt;();

        public Maybe(TValue inValue) {
            this.Value = inValue;
        }

        private Maybe() { }

        public TValue Value { get; private set; }
    }

    public static class Maybe {
        public static Maybe&lt;TValue&gt; ToMaybe&lt;TValue&gt;(this TValue inValue) {
            return new Maybe&lt;TValue&gt;(inValue);
        }

        public static Maybe&lt;TValue&gt; ToMaybe&lt;TValue&gt;(Func&lt;TValue&gt; inFunc) {
            return inFunc().ToMaybe();
        }

        public static async Task&lt;Maybe&lt;TValue&gt;&gt; ToMaybe&lt;TValue&gt;(Func&lt;Task&lt;TValue&gt;&gt; inFunc) {
            var value = await inFunc();

            return value.ToMaybe();
        }
    }

    public static class MaybeExtensons {
        public static Maybe&lt;TValue&gt; NothingUnless&lt;TValue&gt;(this Maybe&lt;TValue&gt; inValue, Func&lt;TValue, bool&gt; inAcceptedFunc) {
            return inAcceptedFunc(inValue.Value) ? inValue : Maybe&lt;TValue&gt;.Nothing;
        }

        public static Maybe&lt;TValue&gt; NothingIfNull&lt;TValue&gt;(this Maybe&lt;TValue&gt; inValue) {
            return inValue.NothingUnless((v) =&gt; v != null);
        }

        public static Maybe&lt;TResult&gt; Select&lt;TSource, TResult&gt;(this Maybe&lt;TSource&gt; inSource, Func&lt;TSource, TResult&gt; inResultSelectorFunc) {
            return SelectCore(inSource, s =&gt; inResultSelectorFunc(s));
        }

        public static Maybe&lt;TResult&gt; SelectMany&lt;TSource, TResult&gt;(
            this Maybe&lt;TSource&gt; inSource,
            Func&lt;TSource, Maybe&lt;TResult&gt;&gt; inSelectorFunc) 
        {
            return SelectMany(inSource, inSelectorFunc, (s, t) =&gt; t);
        }

        public static Maybe&lt;TResult&gt; SelectMany&lt;TSource, TTemporary, TResult&gt;(
            this Maybe&lt;TSource&gt; inSource, 
            Func&lt;TSource, Maybe&lt;TTemporary&gt;&gt; inSelectorFunc, 
            Func&lt;TSource, TTemporary, TResult&gt; inResultSelector) 
        {
            return Maybe&lt;TSource&gt;.Nothing != inSource ? Select(inSource, s =&gt; inSelectorFunc(s).Select(t =&gt; inResultSelector(s, t))).Value : Maybe&lt;TResult&gt;.Nothing;
        }

        private static Maybe&lt;TResult&gt; SelectCore&lt;TSource, TResult&gt;(Maybe&lt;TSource&gt; inSource, Func&lt;TSource, TResult&gt; inSelectorFunc) {
            if (Maybe&lt;TSource&gt;.Nothing == inSource) {
                return Maybe&lt;TResult&gt;.Nothing;
            }
            else {
                return inSelectorFunc(inSource.Value).ToMaybe();
            }
        }
    }

    public static class MaybeAsyncExtensons {
        public static async Task&lt;Maybe&lt;TValue&gt;&gt; NothingUnlessAsync&lt;TValue&gt;(this Maybe&lt;TValue&gt; inValue, Func&lt;TValue, Task&lt;bool&gt;&gt; inAcceptedFunc) {
            return await inAcceptedFunc(inValue.Value) ? inValue : Maybe&lt;TValue&gt;.Nothing;
        }

        public static async Task&lt;Maybe&lt;TValue&gt;&gt; NothingUnlessAsync&lt;TValue&gt;(this Task&lt;Maybe&lt;TValue&gt;&gt; inValue, Func&lt;TValue, Task&lt;bool&gt;&gt; inAcceptedFunc) {
            return await NothingUnlessAsync(await inValue, inAcceptedFunc);
        }

        public static async Task&lt;Maybe&lt;TValue&gt;&gt; NothingUnlessAsync&lt;TValue&gt;(this Task&lt;Maybe&lt;TValue&gt;&gt; inValue, Func&lt;TValue, bool&gt; inAcceptedFunc) {
            return MaybeExtensons.NothingUnless(await inValue, inAcceptedFunc);
        }

        public static async Task&lt;Maybe&lt;TValue&gt;&gt; NothingIfNullAsync&lt;TValue&gt;(this Task&lt;Maybe&lt;TValue&gt;&gt; inValue) {
            return MaybeExtensons.NothingUnless(await inValue, (v) =&gt; v != null);
        }

        public static async Task&lt;Maybe&lt;TResult&gt;&gt; Select&lt;TSource, TResult&gt;(this Maybe&lt;TSource&gt; inSource, Func&lt;TSource, Task&lt;TResult&gt;&gt; inResultSelectorFunc) {
            var result = MaybeExtensons.Select(inSource, s =&gt; inResultSelectorFunc(s));

            return Maybe&lt;Task&lt;TResult&gt;&gt;.Nothing != result ? (await result.Value).ToMaybe() : Maybe&lt;TResult&gt;.Nothing;
        }

        public static async Task&lt;Maybe&lt;TResult&gt;&gt; Select&lt;TSource, TResult&gt;(this Task&lt;Maybe&lt;TSource&gt;&gt; inSource, Func&lt;TSource, Task&lt;TResult&gt;&gt; inResultSelectorFunc) {
            return await Select(await inSource, inResultSelectorFunc);
        }

        public static async Task&lt;Maybe&lt;TResult&gt;&gt; Select&lt;TSource, TResult&gt;(this Task&lt;Maybe&lt;TSource&gt;&gt; inSource, Func&lt;TSource, TResult&gt; inResultSelectorFunc) {
            return MaybeExtensons.Select(await inSource, s =&gt; inResultSelectorFunc(s));
        }

        public static async Task&lt;Maybe&lt;TResult&gt;&gt; SelectMany&lt;TSource, TResult&gt;(this Task&lt;Maybe&lt;TSource&gt;&gt; inSource, Func&lt;TSource, Task&lt;Maybe&lt;TResult&gt;&gt;&gt; inSelectorFunc) {
            return await SelectManyCore(
                await inSource, 
                (s) =&gt; inSelectorFunc(s).ToMaybe(),
                (s, t) =&gt; t
            );
        }

        public static async Task&lt;Maybe&lt;TResult&gt;&gt; SelectMany&lt;TSource, TTemporary, TResult&gt;(
            this Task&lt;Maybe&lt;TSource&gt;&gt; inSource, 
            Func&lt;TSource, Task&lt;Maybe&lt;TTemporary&gt;&gt;&gt; inSelectorFunc, 
            Func&lt;TSource, TTemporary, TResult&gt; inResultSelector) 
        {
            return await SelectManyCore(
                await inSource, 
                (s) =&gt; inSelectorFunc(s).ToMaybe(),
                inResultSelector
            );
        }

        public static async Task&lt;Maybe&lt;TResult&gt;&gt; SelectMany&lt;TSource, TResult&gt;(this Maybe&lt;TSource&gt; inSource, Func&lt;TSource, Task&lt;Maybe&lt;TResult&gt;&gt;&gt; inSelectorFunc) {
            return await SelectManyCore(
                inSource, 
                (s) =&gt; inSelectorFunc(s).ToMaybe(),
                (s, t) =&gt; t
            );
        }

        private static async Task&lt;Maybe&lt;TResult&gt;&gt; SelectManyCore&lt;TSource, TTemporary, TResult&gt;(
           Maybe&lt;TSource&gt; inSource, 
            Func&lt;TSource, Maybe&lt;Task&lt;Maybe&lt;TTemporary&gt;&gt;&gt;&gt; inSelectorFunc, 
            Func&lt;TSource, TTemporary, TResult&gt; inResultSelector) 
        {
            var result = MaybeExtensons.SelectMany(
                inSource, 
                inSelectorFunc,
                async (s, t) =&gt; inResultSelector(s, (await t).Value)
            );

            return Maybe&lt;Task&lt;TResult&gt;&gt;.Nothing != result ? (await (result.Value)).ToMaybe() : Maybe&lt;TResult&gt;.Nothing;
        }
    }
}
</code></pre></noscript></div>
</p>

<p>見ての通り、<a href="http://matarillo.com/general/monads.php">matarillo.com / モナドの驚異</a>の写経です。
ただ、ちょっとだけ手を入れて、c# 5.0のasync / awaitにも対応させてみました。</p>

<p>モナドとかよく分からないですので、写経元見てもらった方がいいと思います。</p>

<p>以上、淡々と並べてみました。</p>
]]></content>
  </entry>
  
</feed>
